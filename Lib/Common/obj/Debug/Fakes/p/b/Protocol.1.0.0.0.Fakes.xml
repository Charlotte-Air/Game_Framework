<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Protocol.1.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Charlotte.Proto.Fakes.ShimBagSaveRequese">
            <summary>Charlotte.Proto.BagSaveRequese 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveRequese.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveRequese.#ctor(Charlotte.Proto.BagSaveRequese)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances.ErrorcodeGet">
            <summary>设置 BagSaveRequese.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 BagSaveRequese.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances.ResultGet">
            <summary>设置 BagSaveRequese.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances.ResultSetResult">
            <summary>设置 BagSaveRequese.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 BagSaveRequese.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveRequese.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveRequese.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveRequese.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.Constructor">
            <summary>设置 BagSaveRequese.BagSaveRequese() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.ErrorcodeGet">
            <summary>设置 BagSaveRequese.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.ErrorcodeSetUInt32">
            <summary>设置 BagSaveRequese.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.ResultGet">
            <summary>设置 BagSaveRequese.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.ResultSetResult">
            <summary>设置 BagSaveRequese.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveRequese.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 BagSaveRequese.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimBagSaveResponst">
            <summary>Charlotte.Proto.BagSaveResponst 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveResponst.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveResponst.#ctor(Charlotte.Proto.BagSaveResponst)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimBagSaveResponst.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.AllInstances.BagInfoGet">
            <summary>设置 BagSaveResponst.get_BagInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.AllInstances.BagInfoSetNBagInfo">
            <summary>设置 BagSaveResponst.set_BagInfo(NBagInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 BagSaveResponst.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.BagInfoGet">
            <summary>设置 BagSaveResponst.get_BagInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.BagInfoSetNBagInfo">
            <summary>设置 BagSaveResponst.set_BagInfo(NBagInfo value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveResponst.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveResponst.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimBagSaveResponst.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.Constructor">
            <summary>设置 BagSaveResponst.BagSaveResponst() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimBagSaveResponst.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 BagSaveResponst.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatMessage">
            <summary>Charlotte.Proto.ChatMessage 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatMessage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatMessage.#ctor(Charlotte.Proto.ChatMessage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ChannelGet">
            <summary>设置 ChatMessage.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ChannelSetChatChannel">
            <summary>设置 ChatMessage.set_Channel(ChatChannel value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.FromIdGet">
            <summary>设置 ChatMessage.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.FromIdSetInt32">
            <summary>设置 ChatMessage.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.FromNameGet">
            <summary>设置 ChatMessage.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.FromNameSetString">
            <summary>设置 ChatMessage.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.IdGet">
            <summary>设置 ChatMessage.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.IdSetInt32">
            <summary>设置 ChatMessage.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.MessageGet">
            <summary>设置 ChatMessage.get_Message() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.MessageSetString">
            <summary>设置 ChatMessage.set_Message(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.TimeGet">
            <summary>设置 ChatMessage.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.TimeSetDouble">
            <summary>设置 ChatMessage.set_Time(Double value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ToIdGet">
            <summary>设置 ChatMessage.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ToIdSetInt32">
            <summary>设置 ChatMessage.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ToNameGet">
            <summary>设置 ChatMessage.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.ToNameSetString">
            <summary>设置 ChatMessage.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatMessage.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatMessage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatMessage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatMessage.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ChannelGet">
            <summary>设置 ChatMessage.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ChannelSetChatChannel">
            <summary>设置 ChatMessage.set_Channel(ChatChannel value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.Constructor">
            <summary>设置 ChatMessage.ChatMessage() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.FromIdGet">
            <summary>设置 ChatMessage.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.FromIdSetInt32">
            <summary>设置 ChatMessage.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.FromNameGet">
            <summary>设置 ChatMessage.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.FromNameSetString">
            <summary>设置 ChatMessage.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.IdGet">
            <summary>设置 ChatMessage.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.IdSetInt32">
            <summary>设置 ChatMessage.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.MessageGet">
            <summary>设置 ChatMessage.get_Message() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.MessageSetString">
            <summary>设置 ChatMessage.set_Message(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.TimeGet">
            <summary>设置 ChatMessage.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.TimeSetDouble">
            <summary>设置 ChatMessage.set_Time(Double value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ToIdGet">
            <summary>设置 ChatMessage.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ToIdSetInt32">
            <summary>设置 ChatMessage.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ToNameGet">
            <summary>设置 ChatMessage.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.ToNameSetString">
            <summary>设置 ChatMessage.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatMessage.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatMessage.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatRequest">
            <summary>Charlotte.Proto.ChatRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatRequest.#ctor(Charlotte.Proto.ChatRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.AllInstances.MessageGet">
            <summary>设置 ChatRequest.get_Message() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.AllInstances.MessageSetChatMessage">
            <summary>设置 ChatRequest.set_Message(ChatMessage value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.Constructor">
            <summary>设置 ChatRequest.ChatRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.MessageGet">
            <summary>设置 ChatRequest.get_Message() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.MessageSetChatMessage">
            <summary>设置 ChatRequest.set_Message(ChatMessage value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatResponse">
            <summary>Charlotte.Proto.ChatResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatResponse.#ctor(Charlotte.Proto.ChatResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.ErrorcodeGet">
            <summary>设置 ChatResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 ChatResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.ResultGet">
            <summary>设置 ChatResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.ResultSetResult">
            <summary>设置 ChatResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.guildMessagesGet">
            <summary>设置 ChatResponse.get_guildMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.locaMessagesGet">
            <summary>设置 ChatResponse.get_locaMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.privateMessagesGet">
            <summary>设置 ChatResponse.get_privateMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.systemMessagesGet">
            <summary>设置 ChatResponse.get_systemMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.teamMessagesGet">
            <summary>设置 ChatResponse.get_teamMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.AllInstances.worldMessagesGet">
            <summary>设置 ChatResponse.get_worldMessages() 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimChatResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.Constructor">
            <summary>设置 ChatResponse.ChatResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.ErrorcodeGet">
            <summary>设置 ChatResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.ErrorcodeSetUInt32">
            <summary>设置 ChatResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.ResultGet">
            <summary>设置 ChatResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.ResultSetResult">
            <summary>设置 ChatResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ChatResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.guildMessagesGet">
            <summary>设置 ChatResponse.get_guildMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.locaMessagesGet">
            <summary>设置 ChatResponse.get_locaMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.privateMessagesGet">
            <summary>设置 ChatResponse.get_privateMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.systemMessagesGet">
            <summary>设置 ChatResponse.get_systemMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.teamMessagesGet">
            <summary>设置 ChatResponse.get_teamMessages() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimChatResponse.worldMessagesGet">
            <summary>设置 ChatResponse.get_worldMessages() 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendAddRequest">
            <summary>Charlotte.Proto.FriendAddRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddRequest.#ctor(Charlotte.Proto.FriendAddRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.FromIdGet">
            <summary>设置 FriendAddRequest.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.FromIdSetInt32">
            <summary>设置 FriendAddRequest.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.FromNameGet">
            <summary>设置 FriendAddRequest.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.FromNameSetString">
            <summary>设置 FriendAddRequest.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.ToIdGet">
            <summary>设置 FriendAddRequest.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.ToIdSetInt32">
            <summary>设置 FriendAddRequest.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.ToNameGet">
            <summary>设置 FriendAddRequest.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.ToNameSetString">
            <summary>设置 FriendAddRequest.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendAddRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.Constructor">
            <summary>设置 FriendAddRequest.FriendAddRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.FromIdGet">
            <summary>设置 FriendAddRequest.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.FromIdSetInt32">
            <summary>设置 FriendAddRequest.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.FromNameGet">
            <summary>设置 FriendAddRequest.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.FromNameSetString">
            <summary>设置 FriendAddRequest.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.ToIdGet">
            <summary>设置 FriendAddRequest.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.ToIdSetInt32">
            <summary>设置 FriendAddRequest.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.ToNameGet">
            <summary>设置 FriendAddRequest.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.ToNameSetString">
            <summary>设置 FriendAddRequest.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendAddRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendAddResponse">
            <summary>Charlotte.Proto.FriendAddResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddResponse.#ctor(Charlotte.Proto.FriendAddResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.ErrorcodeGet">
            <summary>设置 FriendAddResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 FriendAddResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.RequestGet">
            <summary>设置 FriendAddResponse.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.RequestSetFriendAddRequest">
            <summary>设置 FriendAddResponse.set_Request(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.ResultGet">
            <summary>设置 FriendAddResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.ResultSetResult">
            <summary>设置 FriendAddResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendAddResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendAddResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.Constructor">
            <summary>设置 FriendAddResponse.FriendAddResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.ErrorcodeGet">
            <summary>设置 FriendAddResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.ErrorcodeSetUInt32">
            <summary>设置 FriendAddResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.RequestGet">
            <summary>设置 FriendAddResponse.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.RequestSetFriendAddRequest">
            <summary>设置 FriendAddResponse.set_Request(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.ResultGet">
            <summary>设置 FriendAddResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.ResultSetResult">
            <summary>设置 FriendAddResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendAddResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendAddResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendListRequest">
            <summary>Charlotte.Proto.FriendListRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListRequest.#ctor(Charlotte.Proto.FriendListRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendListRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListRequest.Constructor">
            <summary>设置 FriendListRequest.FriendListRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendListResponse">
            <summary>Charlotte.Proto.FriendListResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListResponse.#ctor(Charlotte.Proto.FriendListResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.ErrorcodeGet">
            <summary>设置 FriendListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 FriendListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.FriendsGet">
            <summary>设置 FriendListResponse.get_Friends() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.ResultGet">
            <summary>设置 FriendListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.ResultSetResult">
            <summary>设置 FriendListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendListResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.Constructor">
            <summary>设置 FriendListResponse.FriendListResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.ErrorcodeGet">
            <summary>设置 FriendListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.ErrorcodeSetUInt32">
            <summary>设置 FriendListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.FriendsGet">
            <summary>设置 FriendListResponse.get_Friends() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.ResultGet">
            <summary>设置 FriendListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.ResultSetResult">
            <summary>设置 FriendListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendListResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendRemoveRequest">
            <summary>Charlotte.Proto.FriendRemoveRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.#ctor(Charlotte.Proto.FriendRemoveRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances.IdGet">
            <summary>设置 FriendRemoveRequest.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances.IdSetInt32">
            <summary>设置 FriendRemoveRequest.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances.friendIDGet">
            <summary>设置 FriendRemoveRequest.get_friendID() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances.friendIDSetInt32">
            <summary>设置 FriendRemoveRequest.set_friendID(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendRemoveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.Constructor">
            <summary>设置 FriendRemoveRequest.FriendRemoveRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.IdGet">
            <summary>设置 FriendRemoveRequest.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.IdSetInt32">
            <summary>设置 FriendRemoveRequest.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.friendIDGet">
            <summary>设置 FriendRemoveRequest.get_friendID() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.friendIDSetInt32">
            <summary>设置 FriendRemoveRequest.set_friendID(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendRemoveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendRemoveResponse">
            <summary>Charlotte.Proto.FriendRemoveResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.#ctor(Charlotte.Proto.FriendRemoveResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.ErrorcodeGet">
            <summary>设置 FriendRemoveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 FriendRemoveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.IdGet">
            <summary>设置 FriendRemoveResponse.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.IdSetInt32">
            <summary>设置 FriendRemoveResponse.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.ResultGet">
            <summary>设置 FriendRemoveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.ResultSetResult">
            <summary>设置 FriendRemoveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendRemoveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.Constructor">
            <summary>设置 FriendRemoveResponse.FriendRemoveResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.ErrorcodeGet">
            <summary>设置 FriendRemoveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.ErrorcodeSetUInt32">
            <summary>设置 FriendRemoveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.IdGet">
            <summary>设置 FriendRemoveResponse.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.IdSetInt32">
            <summary>设置 FriendRemoveResponse.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.ResultGet">
            <summary>设置 FriendRemoveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.ResultSetResult">
            <summary>设置 FriendRemoveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimFriendRemoveResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 FriendRemoveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildAdminRequest">
            <summary>Charlotte.Proto.GuildAdminRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRequest.#ctor(Charlotte.Proto.GuildAdminRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances.CommandGet">
            <summary>设置 GuildAdminRequest.get_Command() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances.CommandSetGuildAdminCommand">
            <summary>设置 GuildAdminRequest.set_Command(GuildAdminCommand value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances.TargetGet">
            <summary>设置 GuildAdminRequest.get_Target() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances.TargetSetInt32">
            <summary>设置 GuildAdminRequest.set_Target(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildAdminRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.CommandGet">
            <summary>设置 GuildAdminRequest.get_Command() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.CommandSetGuildAdminCommand">
            <summary>设置 GuildAdminRequest.set_Command(GuildAdminCommand value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.Constructor">
            <summary>设置 GuildAdminRequest.GuildAdminRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.TargetGet">
            <summary>设置 GuildAdminRequest.get_Target() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.TargetSetInt32">
            <summary>设置 GuildAdminRequest.set_Target(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildAdminRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse">
            <summary>Charlotte.Proto.GuildAdminRespnonse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.#ctor(Charlotte.Proto.GuildAdminRespnonse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.CommandGet">
            <summary>设置 GuildAdminRespnonse.get_Command() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.CommandSetGuildAdminRequest">
            <summary>设置 GuildAdminRespnonse.set_Command(GuildAdminRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildAdminRespnonse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildAdminRespnonse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.GuildsGet">
            <summary>设置 GuildAdminRespnonse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.ResutlGet">
            <summary>设置 GuildAdminRespnonse.get_Resutl() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.ResutlSetResult">
            <summary>设置 GuildAdminRespnonse.set_Resutl(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildAdminRespnonse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.CommandGet">
            <summary>设置 GuildAdminRespnonse.get_Command() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.CommandSetGuildAdminRequest">
            <summary>设置 GuildAdminRespnonse.set_Command(GuildAdminRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.Constructor">
            <summary>设置 GuildAdminRespnonse.GuildAdminRespnonse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.ErrorcodeGet">
            <summary>设置 GuildAdminRespnonse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.ErrorcodeSetUInt32">
            <summary>设置 GuildAdminRespnonse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.GuildsGet">
            <summary>设置 GuildAdminRespnonse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.ResutlGet">
            <summary>设置 GuildAdminRespnonse.get_Resutl() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.ResutlSetResult">
            <summary>设置 GuildAdminRespnonse.set_Resutl(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildAdminRespnonse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildAdminRespnonse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildCreateRequest">
            <summary>Charlotte.Proto.GuildCreateRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateRequest.#ctor(Charlotte.Proto.GuildCreateRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances.GuildnameGet">
            <summary>设置 GuildCreateRequest.get_Guildname() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances.GuildnameSetString">
            <summary>设置 GuildCreateRequest.set_Guildname(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances.GuildnoticeGet">
            <summary>设置 GuildCreateRequest.get_Guildnotice() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances.GuildnoticeSetString">
            <summary>设置 GuildCreateRequest.set_Guildnotice(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildCreateRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.Constructor">
            <summary>设置 GuildCreateRequest.GuildCreateRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.GuildnameGet">
            <summary>设置 GuildCreateRequest.get_Guildname() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.GuildnameSetString">
            <summary>设置 GuildCreateRequest.set_Guildname(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.GuildnoticeGet">
            <summary>设置 GuildCreateRequest.get_Guildnotice() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.GuildnoticeSetString">
            <summary>设置 GuildCreateRequest.set_Guildnotice(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildCreateRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildCreateResponse">
            <summary>Charlotte.Proto.GuildCreateResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateResponse.#ctor(Charlotte.Proto.GuildCreateResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildCreateResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildCreateResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.GuildinfoGet">
            <summary>设置 GuildCreateResponse.get_Guildinfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.GuildinfoSetNGuildInfo">
            <summary>设置 GuildCreateResponse.set_Guildinfo(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.ResultGet">
            <summary>设置 GuildCreateResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.ResultSetResult">
            <summary>设置 GuildCreateResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildCreateResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildCreateResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.Constructor">
            <summary>设置 GuildCreateResponse.GuildCreateResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.ErrorcodeGet">
            <summary>设置 GuildCreateResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.ErrorcodeSetUInt32">
            <summary>设置 GuildCreateResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.GuildinfoGet">
            <summary>设置 GuildCreateResponse.get_Guildinfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.GuildinfoSetNGuildInfo">
            <summary>设置 GuildCreateResponse.set_Guildinfo(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.ResultGet">
            <summary>设置 GuildCreateResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.ResultSetResult">
            <summary>设置 GuildCreateResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildCreateResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildCreateResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildJoinRequest">
            <summary>Charlotte.Proto.GuildJoinRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinRequest.#ctor(Charlotte.Proto.GuildJoinRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildJoinRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.AllInstances.ApplyGet">
            <summary>设置 GuildJoinRequest.get_Apply() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.AllInstances.ApplySetNGuildApplyInfo">
            <summary>设置 GuildJoinRequest.set_Apply(NGuildApplyInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildJoinRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.ApplyGet">
            <summary>设置 GuildJoinRequest.get_Apply() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.ApplySetNGuildApplyInfo">
            <summary>设置 GuildJoinRequest.set_Apply(NGuildApplyInfo value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.Constructor">
            <summary>设置 GuildJoinRequest.GuildJoinRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildJoinRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildJoinResponse">
            <summary>Charlotte.Proto.GuildJoinResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinResponse.#ctor(Charlotte.Proto.GuildJoinResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ApplyGet">
            <summary>设置 GuildJoinResponse.get_Apply() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ApplySetNGuildApplyInfo">
            <summary>设置 GuildJoinResponse.set_Apply(NGuildApplyInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildJoinResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildJoinResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ResultGet">
            <summary>设置 GuildJoinResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.ResultSetResult">
            <summary>设置 GuildJoinResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildJoinResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ApplyGet">
            <summary>设置 GuildJoinResponse.get_Apply() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ApplySetNGuildApplyInfo">
            <summary>设置 GuildJoinResponse.set_Apply(NGuildApplyInfo value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildJoinResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.Constructor">
            <summary>设置 GuildJoinResponse.GuildJoinResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ErrorcodeGet">
            <summary>设置 GuildJoinResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ErrorcodeSetUInt32">
            <summary>设置 GuildJoinResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ResultGet">
            <summary>设置 GuildJoinResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.ResultSetResult">
            <summary>设置 GuildJoinResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildJoinResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildJoinResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildLeaveRequest">
            <summary>Charlotte.Proto.GuildLeaveRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.#ctor(Charlotte.Proto.GuildLeaveRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.Constructor">
            <summary>设置 GuildLeaveRequest.GuildLeaveRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildLeaveResponse">
            <summary>Charlotte.Proto.GuildLeaveResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.#ctor(Charlotte.Proto.GuildLeaveResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.GuildsGet">
            <summary>设置 GuildLeaveResponse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.ResultGet">
            <summary>设置 GuildLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.ResultSetResult">
            <summary>设置 GuildLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.Constructor">
            <summary>设置 GuildLeaveResponse.GuildLeaveResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.ErrorcodeGet">
            <summary>设置 GuildLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.ErrorcodeSetUInt32">
            <summary>设置 GuildLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.GuildsGet">
            <summary>设置 GuildLeaveResponse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.ResultGet">
            <summary>设置 GuildLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.ResultSetResult">
            <summary>设置 GuildLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildLeaveResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildListRequest">
            <summary>Charlotte.Proto.GuildListRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListRequest.#ctor(Charlotte.Proto.GuildListRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildListRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListRequest.Constructor">
            <summary>设置 GuildListRequest.GuildListRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildListResponse">
            <summary>Charlotte.Proto.GuildListResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListResponse.#ctor(Charlotte.Proto.GuildListResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.GuildsGet">
            <summary>设置 GuildListResponse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.ResultGet">
            <summary>设置 GuildListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.ResultSetResult">
            <summary>设置 GuildListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildListResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.Constructor">
            <summary>设置 GuildListResponse.GuildListResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.ErrorcodeGet">
            <summary>设置 GuildListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.ErrorcodeSetUInt32">
            <summary>设置 GuildListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.GuildsGet">
            <summary>设置 GuildListResponse.get_Guilds() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.ResultGet">
            <summary>设置 GuildListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.ResultSetResult">
            <summary>设置 GuildListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildListResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildRequest">
            <summary>Charlotte.Proto.GuildRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildRequest.#ctor(Charlotte.Proto.GuildRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildRequest.Constructor">
            <summary>设置 GuildRequest.GuildRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildResponse">
            <summary>Charlotte.Proto.GuildResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildResponse.#ctor(Charlotte.Proto.GuildResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.ErrorcodeGet">
            <summary>设置 GuildResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 GuildResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.ResultGet">
            <summary>设置 GuildResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.ResultSetResult">
            <summary>设置 GuildResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.guildInfoGet">
            <summary>设置 GuildResponse.get_guildInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.AllInstances.guildInfoSetNGuildInfo">
            <summary>设置 GuildResponse.set_guildInfo(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimGuildResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.Constructor">
            <summary>设置 GuildResponse.GuildResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.ErrorcodeGet">
            <summary>设置 GuildResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.ErrorcodeSetUInt32">
            <summary>设置 GuildResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.ResultGet">
            <summary>设置 GuildResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.ResultSetResult">
            <summary>设置 GuildResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 GuildResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.guildInfoGet">
            <summary>设置 GuildResponse.get_guildInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimGuildResponse.guildInfoSetNGuildInfo">
            <summary>设置 GuildResponse.set_guildInfo(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemBuyRequest">
            <summary>Charlotte.Proto.ItemBuyRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyRequest.#ctor(Charlotte.Proto.ItemBuyRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemBuyRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances.shopIdGet">
            <summary>设置 ItemBuyRequest.get_shopId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances.shopIdSetInt32">
            <summary>设置 ItemBuyRequest.set_shopId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances.shopItemIdGet">
            <summary>设置 ItemBuyRequest.get_shopItemId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.AllInstances.shopItemIdSetInt32">
            <summary>设置 ItemBuyRequest.set_shopItemId(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.Constructor">
            <summary>设置 ItemBuyRequest.ItemBuyRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemBuyRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.shopIdGet">
            <summary>设置 ItemBuyRequest.get_shopId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.shopIdSetInt32">
            <summary>设置 ItemBuyRequest.set_shopId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.shopItemIdGet">
            <summary>设置 ItemBuyRequest.get_shopItemId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyRequest.shopItemIdSetInt32">
            <summary>设置 ItemBuyRequest.set_shopItemId(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemBuyResponse">
            <summary>Charlotte.Proto.ItemBuyResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyResponse.#ctor(Charlotte.Proto.ItemBuyResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances.ErrorcodeGet">
            <summary>设置 ItemBuyResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 ItemBuyResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances.ResultGet">
            <summary>设置 ItemBuyResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances.ResultSetResult">
            <summary>设置 ItemBuyResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemBuyResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemBuyResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.Constructor">
            <summary>设置 ItemBuyResponse.ItemBuyResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.ErrorcodeGet">
            <summary>设置 ItemBuyResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.ErrorcodeSetUInt32">
            <summary>设置 ItemBuyResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.ResultGet">
            <summary>设置 ItemBuyResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.ResultSetResult">
            <summary>设置 ItemBuyResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemBuyResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemBuyResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemEquipRequest">
            <summary>Charlotte.Proto.ItemEquipRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipRequest.#ctor(Charlotte.Proto.ItemEquipRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.SlotGet">
            <summary>设置 ItemEquipRequest.get_Slot() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.SlotSetInt32">
            <summary>设置 ItemEquipRequest.set_Slot(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemEquipRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.isEquipGet">
            <summary>设置 ItemEquipRequest.get_isEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.isEquipSetBoolean">
            <summary>设置 ItemEquipRequest.set_isEquip(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.itemIdGet">
            <summary>设置 ItemEquipRequest.get_itemId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.AllInstances.itemIdSetInt32">
            <summary>设置 ItemEquipRequest.set_itemId(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.Constructor">
            <summary>设置 ItemEquipRequest.ItemEquipRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.SlotGet">
            <summary>设置 ItemEquipRequest.get_Slot() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.SlotSetInt32">
            <summary>设置 ItemEquipRequest.set_Slot(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemEquipRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.isEquipGet">
            <summary>设置 ItemEquipRequest.get_isEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.isEquipSetBoolean">
            <summary>设置 ItemEquipRequest.set_isEquip(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.itemIdGet">
            <summary>设置 ItemEquipRequest.get_itemId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipRequest.itemIdSetInt32">
            <summary>设置 ItemEquipRequest.set_itemId(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemEquipResponse">
            <summary>Charlotte.Proto.ItemEquipResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipResponse.#ctor(Charlotte.Proto.ItemEquipResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances.ErrorcodeGet">
            <summary>设置 ItemEquipResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 ItemEquipResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances.ResultGet">
            <summary>设置 ItemEquipResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances.ResultSetResult">
            <summary>设置 ItemEquipResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemEquipResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimItemEquipResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.Constructor">
            <summary>设置 ItemEquipResponse.ItemEquipResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.ErrorcodeGet">
            <summary>设置 ItemEquipResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.ErrorcodeSetUInt32">
            <summary>设置 ItemEquipResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.ResultGet">
            <summary>设置 ItemEquipResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.ResultSetResult">
            <summary>设置 ItemEquipResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimItemEquipResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 ItemEquipResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest">
            <summary>Charlotte.Proto.MapCharacterEnterRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.#ctor(Charlotte.Proto.MapCharacterEnterRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterEnterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.AllInstances.mapIdGet">
            <summary>设置 MapCharacterEnterRequest.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.AllInstances.mapIdSetByteArray">
            <summary>设置 MapCharacterEnterRequest.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.Constructor">
            <summary>设置 MapCharacterEnterRequest.MapCharacterEnterRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterEnterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.mapIdGet">
            <summary>设置 MapCharacterEnterRequest.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterRequest.mapIdSetByteArray">
            <summary>设置 MapCharacterEnterRequest.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse">
            <summary>Charlotte.Proto.MapCharacterEnterResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.#ctor(Charlotte.Proto.MapCharacterEnterResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.AllInstances.CharactersGet">
            <summary>设置 MapCharacterEnterResponse.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterEnterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.AllInstances.mapIdGet">
            <summary>设置 MapCharacterEnterResponse.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.AllInstances.mapIdSetByteArray">
            <summary>设置 MapCharacterEnterResponse.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.CharactersGet">
            <summary>设置 MapCharacterEnterResponse.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.Constructor">
            <summary>设置 MapCharacterEnterResponse.MapCharacterEnterResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterEnterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.mapIdGet">
            <summary>设置 MapCharacterEnterResponse.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterEnterResponse.mapIdSetByteArray">
            <summary>设置 MapCharacterEnterResponse.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse">
            <summary>Charlotte.Proto.MapCharacterLeaveResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.#ctor(Charlotte.Proto.MapCharacterLeaveResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.AllInstances.EntityIdGet">
            <summary>设置 MapCharacterLeaveResponse.get_EntityId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.AllInstances.EntityIdSetInt32">
            <summary>设置 MapCharacterLeaveResponse.set_EntityId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.Constructor">
            <summary>设置 MapCharacterLeaveResponse.MapCharacterLeaveResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.EntityIdGet">
            <summary>设置 MapCharacterLeaveResponse.get_EntityId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.EntityIdSetInt32">
            <summary>设置 MapCharacterLeaveResponse.set_EntityId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapCharacterLeaveResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapCharacterLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest">
            <summary>Charlotte.Proto.MapEntitySyncRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.#ctor(Charlotte.Proto.MapEntitySyncRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.AllInstances.entitySyncGet">
            <summary>设置 MapEntitySyncRequest.get_entitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.AllInstances.entitySyncSetNEntitySync">
            <summary>设置 MapEntitySyncRequest.set_entitySync(NEntitySync value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapEntitySyncRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.Constructor">
            <summary>设置 MapEntitySyncRequest.MapEntitySyncRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.entitySyncGet">
            <summary>设置 MapEntitySyncRequest.get_entitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.entitySyncSetNEntitySync">
            <summary>设置 MapEntitySyncRequest.set_entitySync(NEntitySync value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapEntitySyncRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse">
            <summary>Charlotte.Proto.MapEntitySyncResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.#ctor(Charlotte.Proto.MapEntitySyncResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.AllInstances.entitySyncsGet">
            <summary>设置 MapEntitySyncResponse.get_entitySyncs() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapEntitySyncResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.Constructor">
            <summary>设置 MapEntitySyncResponse.MapEntitySyncResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.entitySyncsGet">
            <summary>设置 MapEntitySyncResponse.get_entitySyncs() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapEntitySyncResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapEntitySyncResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapTeleportRequest">
            <summary>Charlotte.Proto.MapTeleportRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapTeleportRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapTeleportRequest.#ctor(Charlotte.Proto.MapTeleportRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimMapTeleportRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapTeleportRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.AllInstances.teleporterIdGet">
            <summary>设置 MapTeleportRequest.get_teleporterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.AllInstances.teleporterIdSetInt32">
            <summary>设置 MapTeleportRequest.set_teleporterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapTeleportRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapTeleportRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimMapTeleportRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.Constructor">
            <summary>设置 MapTeleportRequest.MapTeleportRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 MapTeleportRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.teleporterIdGet">
            <summary>设置 MapTeleportRequest.get_teleporterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimMapTeleportRequest.teleporterIdSetInt32">
            <summary>设置 MapTeleportRequest.set_teleporterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNBagInfo">
            <summary>Charlotte.Proto.NBagInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNBagInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNBagInfo.#ctor(Charlotte.Proto.NBagInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances.ItemsGet">
            <summary>设置 NBagInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances.ItemsSetByteArray">
            <summary>设置 NBagInfo.set_Items(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances.UnlockedGet">
            <summary>设置 NBagInfo.get_Unlocked() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances.UnlockedSetInt32">
            <summary>设置 NBagInfo.set_Unlocked(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NBagInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNBagInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNBagInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNBagInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.Constructor">
            <summary>设置 NBagInfo.NBagInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.ItemsGet">
            <summary>设置 NBagInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.ItemsSetByteArray">
            <summary>设置 NBagInfo.set_Items(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.UnlockedGet">
            <summary>设置 NBagInfo.get_Unlocked() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.UnlockedSetInt32">
            <summary>设置 NBagInfo.set_Unlocked(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNBagInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NBagInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNCharacterInfo">
            <summary>Charlotte.Proto.NCharacterInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNCharacterInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNCharacterInfo.#ctor(Charlotte.Proto.NCharacterInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.BagGet">
            <summary>设置 NCharacterInfo.get_Bag() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.BagSetNBagInfo">
            <summary>设置 NCharacterInfo.set_Bag(NBagInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.ClassGet">
            <summary>设置 NCharacterInfo.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.ClassSetCharacterClass">
            <summary>设置 NCharacterInfo.set_Class(CharacterClass value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.ConfigIdGet">
            <summary>设置 NCharacterInfo.get_ConfigId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.ConfigIdSetInt32">
            <summary>设置 NCharacterInfo.set_ConfigId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EntityGet">
            <summary>设置 NCharacterInfo.get_Entity() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EntityIdGet">
            <summary>设置 NCharacterInfo.get_EntityId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EntityIdSetInt32">
            <summary>设置 NCharacterInfo.set_EntityId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EntitySetNEntity">
            <summary>设置 NCharacterInfo.set_Entity(NEntity value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EquipsGet">
            <summary>设置 NCharacterInfo.get_Equips() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.EquipsSetByteArray">
            <summary>设置 NCharacterInfo.set_Equips(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.FriendsGet">
            <summary>设置 NCharacterInfo.get_Friends() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.GoldGet">
            <summary>设置 NCharacterInfo.get_Gold() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.GoldSetInt64">
            <summary>设置 NCharacterInfo.set_Gold(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.GuildGet">
            <summary>设置 NCharacterInfo.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.GuildSetNGuildInfo">
            <summary>设置 NCharacterInfo.set_Guild(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.IdGet">
            <summary>设置 NCharacterInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.IdSetInt32">
            <summary>设置 NCharacterInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.ItemsGet">
            <summary>设置 NCharacterInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.LevelGet">
            <summary>设置 NCharacterInfo.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.LevelSetInt32">
            <summary>设置 NCharacterInfo.set_Level(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.NameGet">
            <summary>设置 NCharacterInfo.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.NameSetString">
            <summary>设置 NCharacterInfo.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.QuestsGet">
            <summary>设置 NCharacterInfo.get_Quests() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.TeamsGet">
            <summary>设置 NCharacterInfo.get_Teams() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.TypeGet">
            <summary>设置 NCharacterInfo.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.TypeSetCharacterType">
            <summary>设置 NCharacterInfo.set_Type(CharacterType value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NCharacterInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.mapIdGet">
            <summary>设置 NCharacterInfo.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.AllInstances.mapIdSetByteArray">
            <summary>设置 NCharacterInfo.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.BagGet">
            <summary>设置 NCharacterInfo.get_Bag() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.BagSetNBagInfo">
            <summary>设置 NCharacterInfo.set_Bag(NBagInfo value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNCharacterInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNCharacterInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNCharacterInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.ClassGet">
            <summary>设置 NCharacterInfo.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.ClassSetCharacterClass">
            <summary>设置 NCharacterInfo.set_Class(CharacterClass value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.ConfigIdGet">
            <summary>设置 NCharacterInfo.get_ConfigId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.ConfigIdSetInt32">
            <summary>设置 NCharacterInfo.set_ConfigId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.Constructor">
            <summary>设置 NCharacterInfo.NCharacterInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EntityGet">
            <summary>设置 NCharacterInfo.get_Entity() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EntityIdGet">
            <summary>设置 NCharacterInfo.get_EntityId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EntityIdSetInt32">
            <summary>设置 NCharacterInfo.set_EntityId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EntitySetNEntity">
            <summary>设置 NCharacterInfo.set_Entity(NEntity value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EquipsGet">
            <summary>设置 NCharacterInfo.get_Equips() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.EquipsSetByteArray">
            <summary>设置 NCharacterInfo.set_Equips(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.FriendsGet">
            <summary>设置 NCharacterInfo.get_Friends() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.GoldGet">
            <summary>设置 NCharacterInfo.get_Gold() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.GoldSetInt64">
            <summary>设置 NCharacterInfo.set_Gold(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.GuildGet">
            <summary>设置 NCharacterInfo.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.GuildSetNGuildInfo">
            <summary>设置 NCharacterInfo.set_Guild(NGuildInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.IdGet">
            <summary>设置 NCharacterInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.IdSetInt32">
            <summary>设置 NCharacterInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.ItemsGet">
            <summary>设置 NCharacterInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.LevelGet">
            <summary>设置 NCharacterInfo.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.LevelSetInt32">
            <summary>设置 NCharacterInfo.set_Level(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.NameGet">
            <summary>设置 NCharacterInfo.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.NameSetString">
            <summary>设置 NCharacterInfo.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.QuestsGet">
            <summary>设置 NCharacterInfo.get_Quests() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.TeamsGet">
            <summary>设置 NCharacterInfo.get_Teams() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.TypeGet">
            <summary>设置 NCharacterInfo.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.TypeSetCharacterType">
            <summary>设置 NCharacterInfo.set_Type(CharacterType value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NCharacterInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.mapIdGet">
            <summary>设置 NCharacterInfo.get_mapId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNCharacterInfo.mapIdSetByteArray">
            <summary>设置 NCharacterInfo.set_mapId(Byte[] value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNEntity">
            <summary>Charlotte.Proto.NEntity 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntity.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntity.#ctor(Charlotte.Proto.NEntity)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNEntity.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.DirectionGet">
            <summary>设置 NEntity.get_Direction() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.DirectionSetNVector3">
            <summary>设置 NEntity.set_Direction(NVector3 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.IdGet">
            <summary>设置 NEntity.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.IdSetInt32">
            <summary>设置 NEntity.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.PositionGet">
            <summary>设置 NEntity.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.PositionSetNVector3">
            <summary>设置 NEntity.set_Position(NVector3 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.SpeedGet">
            <summary>设置 NEntity.get_Speed() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.SpeedSetInt32">
            <summary>设置 NEntity.set_Speed(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NEntity.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntity.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntity.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntity.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.Constructor">
            <summary>设置 NEntity.NEntity() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.DirectionGet">
            <summary>设置 NEntity.get_Direction() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.DirectionSetNVector3">
            <summary>设置 NEntity.set_Direction(NVector3 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.IdGet">
            <summary>设置 NEntity.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.IdSetInt32">
            <summary>设置 NEntity.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.PositionGet">
            <summary>设置 NEntity.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.PositionSetNVector3">
            <summary>设置 NEntity.set_Position(NVector3 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.SpeedGet">
            <summary>设置 NEntity.get_Speed() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.SpeedSetInt32">
            <summary>设置 NEntity.set_Speed(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntity.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NEntity.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNEntitySync">
            <summary>Charlotte.Proto.NEntitySync 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntitySync.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntitySync.#ctor(Charlotte.Proto.NEntitySync)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances.EntityGet">
            <summary>设置 NEntitySync.get_Entity() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances.EntitySetNEntity">
            <summary>设置 NEntitySync.set_Entity(NEntity value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances.EventGet">
            <summary>设置 NEntitySync.get_Event() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances.EventSetEntityEvent">
            <summary>设置 NEntitySync.set_Event(EntityEvent value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NEntitySync.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntitySync.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntitySync.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNEntitySync.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.Constructor">
            <summary>设置 NEntitySync.NEntitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.EntityGet">
            <summary>设置 NEntitySync.get_Entity() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.EntitySetNEntity">
            <summary>设置 NEntitySync.set_Entity(NEntity value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.EventGet">
            <summary>设置 NEntitySync.get_Event() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.EventSetEntityEvent">
            <summary>设置 NEntitySync.set_Event(EntityEvent value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNEntitySync.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NEntitySync.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNFriendInfo">
            <summary>Charlotte.Proto.NFriendInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNFriendInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNFriendInfo.#ctor(Charlotte.Proto.NFriendInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.IdGet">
            <summary>设置 NFriendInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.IdSetInt32">
            <summary>设置 NFriendInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.StatusGet">
            <summary>设置 NFriendInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.StatusSetInt32">
            <summary>设置 NFriendInfo.set_Status(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.friendInfoGet">
            <summary>设置 NFriendInfo.get_friendInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.friendInfoSetNCharacterInfo">
            <summary>设置 NFriendInfo.set_friendInfo(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NFriendInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNFriendInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNFriendInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNFriendInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.Constructor">
            <summary>设置 NFriendInfo.NFriendInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.IdGet">
            <summary>设置 NFriendInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.IdSetInt32">
            <summary>设置 NFriendInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.StatusGet">
            <summary>设置 NFriendInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.StatusSetInt32">
            <summary>设置 NFriendInfo.set_Status(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.friendInfoGet">
            <summary>设置 NFriendInfo.get_friendInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.friendInfoSetNCharacterInfo">
            <summary>设置 NFriendInfo.set_friendInfo(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNFriendInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NFriendInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildApplyInfo">
            <summary>Charlotte.Proto.NGuildApplyInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.#ctor(Charlotte.Proto.NGuildApplyInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.ClassGet">
            <summary>设置 NGuildApplyInfo.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.ClassSetInt32">
            <summary>设置 NGuildApplyInfo.set_Class(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.GuildIdGet">
            <summary>设置 NGuildApplyInfo.get_GuildId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.GuildIdSetInt32">
            <summary>设置 NGuildApplyInfo.set_GuildId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.LevelGet">
            <summary>设置 NGuildApplyInfo.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.LevelSetInt32">
            <summary>设置 NGuildApplyInfo.set_Level(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.NameGet">
            <summary>设置 NGuildApplyInfo.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.NameSetString">
            <summary>设置 NGuildApplyInfo.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.ResultGet">
            <summary>设置 NGuildApplyInfo.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.ResultSetApplyResult">
            <summary>设置 NGuildApplyInfo.set_Result(ApplyResult value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.characterIdGet">
            <summary>设置 NGuildApplyInfo.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.characterIdSetInt32">
            <summary>设置 NGuildApplyInfo.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildApplyInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.ClassGet">
            <summary>设置 NGuildApplyInfo.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.ClassSetInt32">
            <summary>设置 NGuildApplyInfo.set_Class(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.Constructor">
            <summary>设置 NGuildApplyInfo.NGuildApplyInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.GuildIdGet">
            <summary>设置 NGuildApplyInfo.get_GuildId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.GuildIdSetInt32">
            <summary>设置 NGuildApplyInfo.set_GuildId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.LevelGet">
            <summary>设置 NGuildApplyInfo.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.LevelSetInt32">
            <summary>设置 NGuildApplyInfo.set_Level(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.NameGet">
            <summary>设置 NGuildApplyInfo.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.NameSetString">
            <summary>设置 NGuildApplyInfo.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.ResultGet">
            <summary>设置 NGuildApplyInfo.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.ResultSetApplyResult">
            <summary>设置 NGuildApplyInfo.set_Result(ApplyResult value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.characterIdGet">
            <summary>设置 NGuildApplyInfo.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.characterIdSetInt32">
            <summary>设置 NGuildApplyInfo.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildApplyInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildApplyInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildInfo">
            <summary>Charlotte.Proto.NGuildInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildInfo.#ctor(Charlotte.Proto.NGuildInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.AppliesGet">
            <summary>设置 NGuildInfo.get_Applies() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.GuildNameGet">
            <summary>设置 NGuildInfo.get_GuildName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.GuildNameSetString">
            <summary>设置 NGuildInfo.set_GuildName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.IdGet">
            <summary>设置 NGuildInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.IdSetInt32">
            <summary>设置 NGuildInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.LeadernameGet">
            <summary>设置 NGuildInfo.get_Leadername() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.LeadernameSetString">
            <summary>设置 NGuildInfo.set_Leadername(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.MembersGet">
            <summary>设置 NGuildInfo.get_Members() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.NoticeGet">
            <summary>设置 NGuildInfo.get_Notice() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.NoticeSetString">
            <summary>设置 NGuildInfo.set_Notice(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.createTimeGet">
            <summary>设置 NGuildInfo.get_createTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.createTimeSetInt64">
            <summary>设置 NGuildInfo.set_createTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.leaderIdGet">
            <summary>设置 NGuildInfo.get_leaderId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.leaderIdSetInt32">
            <summary>设置 NGuildInfo.set_leaderId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.memberCountGet">
            <summary>设置 NGuildInfo.get_memberCount() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AllInstances.memberCountSetInt32">
            <summary>设置 NGuildInfo.set_memberCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.AppliesGet">
            <summary>设置 NGuildInfo.get_Applies() 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.Constructor">
            <summary>设置 NGuildInfo.NGuildInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.GuildNameGet">
            <summary>设置 NGuildInfo.get_GuildName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.GuildNameSetString">
            <summary>设置 NGuildInfo.set_GuildName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.IdGet">
            <summary>设置 NGuildInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.IdSetInt32">
            <summary>设置 NGuildInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.LeadernameGet">
            <summary>设置 NGuildInfo.get_Leadername() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.LeadernameSetString">
            <summary>设置 NGuildInfo.set_Leadername(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.MembersGet">
            <summary>设置 NGuildInfo.get_Members() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.NoticeGet">
            <summary>设置 NGuildInfo.get_Notice() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.NoticeSetString">
            <summary>设置 NGuildInfo.set_Notice(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.createTimeGet">
            <summary>设置 NGuildInfo.get_createTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.createTimeSetInt64">
            <summary>设置 NGuildInfo.set_createTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.leaderIdGet">
            <summary>设置 NGuildInfo.get_leaderId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.leaderIdSetInt32">
            <summary>设置 NGuildInfo.set_leaderId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.memberCountGet">
            <summary>设置 NGuildInfo.get_memberCount() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildInfo.memberCountSetInt32">
            <summary>设置 NGuildInfo.set_memberCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildMemberInfo">
            <summary>Charlotte.Proto.NGuildMemberInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.#ctor(Charlotte.Proto.NGuildMemberInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.IdGet">
            <summary>设置 NGuildMemberInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.IdSetInt32">
            <summary>设置 NGuildMemberInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.InfoGet">
            <summary>设置 NGuildMemberInfo.get_Info() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.InfoSetNCharacterInfo">
            <summary>设置 NGuildMemberInfo.set_Info(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.StatusGet">
            <summary>设置 NGuildMemberInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.StatusSetInt32">
            <summary>设置 NGuildMemberInfo.set_Status(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.TitleGet">
            <summary>设置 NGuildMemberInfo.get_Title() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.TitleSetGuildTitle">
            <summary>设置 NGuildMemberInfo.set_Title(GuildTitle value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.characterIdGet">
            <summary>设置 NGuildMemberInfo.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.characterIdSetInt32">
            <summary>设置 NGuildMemberInfo.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildMemberInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.joinTimeGet">
            <summary>设置 NGuildMemberInfo.get_joinTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.joinTimeSetInt64">
            <summary>设置 NGuildMemberInfo.set_joinTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.lastTimeGet">
            <summary>设置 NGuildMemberInfo.get_lastTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.AllInstances.lastTimeSetInt64">
            <summary>设置 NGuildMemberInfo.set_lastTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.Constructor">
            <summary>设置 NGuildMemberInfo.NGuildMemberInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.IdGet">
            <summary>设置 NGuildMemberInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.IdSetInt32">
            <summary>设置 NGuildMemberInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.InfoGet">
            <summary>设置 NGuildMemberInfo.get_Info() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.InfoSetNCharacterInfo">
            <summary>设置 NGuildMemberInfo.set_Info(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.StatusGet">
            <summary>设置 NGuildMemberInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.StatusSetInt32">
            <summary>设置 NGuildMemberInfo.set_Status(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.TitleGet">
            <summary>设置 NGuildMemberInfo.get_Title() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.TitleSetGuildTitle">
            <summary>设置 NGuildMemberInfo.set_Title(GuildTitle value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.characterIdGet">
            <summary>设置 NGuildMemberInfo.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.characterIdSetInt32">
            <summary>设置 NGuildMemberInfo.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NGuildMemberInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.joinTimeGet">
            <summary>设置 NGuildMemberInfo.get_joinTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.joinTimeSetInt64">
            <summary>设置 NGuildMemberInfo.set_joinTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.lastTimeGet">
            <summary>设置 NGuildMemberInfo.get_lastTime() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNGuildMemberInfo.lastTimeSetInt64">
            <summary>设置 NGuildMemberInfo.set_lastTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNItemInfo">
            <summary>Charlotte.Proto.NItemInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNItemInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNItemInfo.#ctor(Charlotte.Proto.NItemInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances.CountGet">
            <summary>设置 NItemInfo.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances.CountSetInt32">
            <summary>设置 NItemInfo.set_Count(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances.IdGet">
            <summary>设置 NItemInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances.IdSetInt32">
            <summary>设置 NItemInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NItemInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNItemInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNItemInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNItemInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.Constructor">
            <summary>设置 NItemInfo.NItemInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.CountGet">
            <summary>设置 NItemInfo.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.CountSetInt32">
            <summary>设置 NItemInfo.set_Count(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.IdGet">
            <summary>设置 NItemInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.IdSetInt32">
            <summary>设置 NItemInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNItemInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NItemInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNPlayerInfo">
            <summary>Charlotte.Proto.NPlayerInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNPlayerInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNPlayerInfo.#ctor(Charlotte.Proto.NPlayerInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNPlayerInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.AllInstances.CharactersGet">
            <summary>设置 NPlayerInfo.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.AllInstances.IdGet">
            <summary>设置 NPlayerInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.AllInstances.IdSetInt32">
            <summary>设置 NPlayerInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NPlayerInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNPlayerInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNPlayerInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNPlayerInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.CharactersGet">
            <summary>设置 NPlayerInfo.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.Constructor">
            <summary>设置 NPlayerInfo.NPlayerInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.IdGet">
            <summary>设置 NPlayerInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.IdSetInt32">
            <summary>设置 NPlayerInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNPlayerInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NPlayerInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNQuestInfo">
            <summary>Charlotte.Proto.NQuestInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNQuestInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNQuestInfo.#ctor(Charlotte.Proto.NQuestInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.QuestGuidGet">
            <summary>设置 NQuestInfo.get_QuestGuid() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.QuestGuidSetInt32">
            <summary>设置 NQuestInfo.set_QuestGuid(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.QuestIdGet">
            <summary>设置 NQuestInfo.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.QuestIdSetInt32">
            <summary>设置 NQuestInfo.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.StatusGet">
            <summary>设置 NQuestInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.StatusSetQuestStatus">
            <summary>设置 NQuestInfo.set_Status(QuestStatus value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.TgrgetsGet">
            <summary>设置 NQuestInfo.get_Tgrgets() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.TgrgetsSetInt32Array">
            <summary>设置 NQuestInfo.set_Tgrgets(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NQuestInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNQuestInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNQuestInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNQuestInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.Constructor">
            <summary>设置 NQuestInfo.NQuestInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.QuestGuidGet">
            <summary>设置 NQuestInfo.get_QuestGuid() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.QuestGuidSetInt32">
            <summary>设置 NQuestInfo.set_QuestGuid(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.QuestIdGet">
            <summary>设置 NQuestInfo.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.QuestIdSetInt32">
            <summary>设置 NQuestInfo.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.StatusGet">
            <summary>设置 NQuestInfo.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.StatusSetQuestStatus">
            <summary>设置 NQuestInfo.set_Status(QuestStatus value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.TgrgetsGet">
            <summary>设置 NQuestInfo.get_Tgrgets() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.TgrgetsSetInt32Array">
            <summary>设置 NQuestInfo.set_Tgrgets(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNQuestInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NQuestInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNStatus">
            <summary>Charlotte.Proto.NStatus 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNStatus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNStatus.#ctor(Charlotte.Proto.NStatus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.ActionGet">
            <summary>设置 NStatus.get_Action() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.ActionSetStatusAction">
            <summary>设置 NStatus.set_Action(StatusAction value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNStatus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.ActionGet">
            <summary>设置 NStatus.get_Action() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.ActionSetStatusAction">
            <summary>设置 NStatus.set_Action(StatusAction value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.IdGet">
            <summary>设置 NStatus.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.IdSetInt32">
            <summary>设置 NStatus.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.TypeGet">
            <summary>设置 NStatus.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.TypeSetStatusType">
            <summary>设置 NStatus.set_Type(StatusType value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.ValueGet">
            <summary>设置 NStatus.get_Value() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.ValueSetInt32">
            <summary>设置 NStatus.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NStatus.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNStatus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNStatus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNStatus.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.Constructor">
            <summary>设置 NStatus.NStatus() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.IdGet">
            <summary>设置 NStatus.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.IdSetInt32">
            <summary>设置 NStatus.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.TypeGet">
            <summary>设置 NStatus.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.TypeSetStatusType">
            <summary>设置 NStatus.set_Type(StatusType value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.ValueGet">
            <summary>设置 NStatus.get_Value() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.ValueSetInt32">
            <summary>设置 NStatus.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNStatus.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NStatus.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNTeamInfo">
            <summary>Charlotte.Proto.NTeamInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNTeamInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNTeamInfo.#ctor(Charlotte.Proto.NTeamInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.IdGet">
            <summary>设置 NTeamInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.IdSetInt32">
            <summary>设置 NTeamInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.LeaderGet">
            <summary>设置 NTeamInfo.get_Leader() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.LeaderSetInt32">
            <summary>设置 NTeamInfo.set_Leader(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.MembersGet">
            <summary>设置 NTeamInfo.get_Members() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NTeamInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNTeamInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNTeamInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNTeamInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.Constructor">
            <summary>设置 NTeamInfo.NTeamInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.IdGet">
            <summary>设置 NTeamInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.IdSetInt32">
            <summary>设置 NTeamInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.LeaderGet">
            <summary>设置 NTeamInfo.get_Leader() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.LeaderSetInt32">
            <summary>设置 NTeamInfo.set_Leader(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.MembersGet">
            <summary>设置 NTeamInfo.get_Members() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNTeamInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NTeamInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNUserInfo">
            <summary>Charlotte.Proto.NUserInfo 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNUserInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNUserInfo.#ctor(Charlotte.Proto.NUserInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances.IdGet">
            <summary>设置 NUserInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances.IdSetInt32">
            <summary>设置 NUserInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances.PlayerGet">
            <summary>设置 NUserInfo.get_Player() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances.PlayerSetNPlayerInfo">
            <summary>设置 NUserInfo.set_Player(NPlayerInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NUserInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNUserInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNUserInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNUserInfo.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.Constructor">
            <summary>设置 NUserInfo.NUserInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.IdGet">
            <summary>设置 NUserInfo.get_Id() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.IdSetInt32">
            <summary>设置 NUserInfo.set_Id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.PlayerGet">
            <summary>设置 NUserInfo.get_Player() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.PlayerSetNPlayerInfo">
            <summary>设置 NUserInfo.set_Player(NPlayerInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNUserInfo.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NUserInfo.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNVector3">
            <summary>Charlotte.Proto.NVector3 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNVector3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNVector3.#ctor(Charlotte.Proto.NVector3)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNVector3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.XGet">
            <summary>设置 NVector3.get_X() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.XSetInt32">
            <summary>设置 NVector3.set_X(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.YGet">
            <summary>设置 NVector3.get_Y() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.YSetInt32">
            <summary>设置 NVector3.set_Y(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.ZGet">
            <summary>设置 NVector3.get_Z() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.ZSetInt32">
            <summary>设置 NVector3.set_Z(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NVector3.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNVector3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNVector3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNVector3.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.Constructor">
            <summary>设置 NVector3.NVector3() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.XGet">
            <summary>设置 NVector3.get_X() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.XSetInt32">
            <summary>设置 NVector3.set_X(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.YGet">
            <summary>设置 NVector3.get_Y() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.YSetInt32">
            <summary>设置 NVector3.set_Y(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.ZGet">
            <summary>设置 NVector3.get_Z() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.ZSetInt32">
            <summary>设置 NVector3.set_Z(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNVector3.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NVector3.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessage">
            <summary>Charlotte.Proto.NetMessage 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessage.#ctor(Charlotte.Proto.NetMessage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances.RequestGet">
            <summary>设置 NetMessage.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances.RequestSetNetMessageRequest">
            <summary>设置 NetMessage.set_Request(NetMessageRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances.ResponseGet">
            <summary>设置 NetMessage.get_Response() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances.ResponseSetNetMessageResponse">
            <summary>设置 NetMessage.set_Response(NetMessageResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessage.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessage.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.Constructor">
            <summary>设置 NetMessage.NetMessage() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.RequestGet">
            <summary>设置 NetMessage.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.RequestSetNetMessageRequest">
            <summary>设置 NetMessage.set_Request(NetMessageRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.ResponseGet">
            <summary>设置 NetMessage.get_Response() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.ResponseSetNetMessageResponse">
            <summary>设置 NetMessage.set_Response(NetMessageResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessage.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessage.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessageRequest">
            <summary>Charlotte.Proto.NetMessageRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageRequest.#ctor(Charlotte.Proto.NetMessageRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.ChatGet">
            <summary>设置 NetMessageRequest.get_Chat() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.ChatSetChatRequest">
            <summary>设置 NetMessageRequest.set_Chat(ChatRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.GuildGet">
            <summary>设置 NetMessageRequest.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.GuildSetGuildRequest">
            <summary>设置 NetMessageRequest.set_Guild(GuildRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.createCharGet">
            <summary>设置 NetMessageRequest.get_createChar() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.createCharSetUserCreateCharacterRequest">
            <summary>设置 NetMessageRequest.set_createChar(UserCreateCharacterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendAddReqGet">
            <summary>设置 NetMessageRequest.get_friendAddReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendAddReqSetFriendAddRequest">
            <summary>设置 NetMessageRequest.set_friendAddReq(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendAddResGet">
            <summary>设置 NetMessageRequest.get_friendAddRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendAddResSetFriendAddResponse">
            <summary>设置 NetMessageRequest.set_friendAddRes(FriendAddResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendListGet">
            <summary>设置 NetMessageRequest.get_friendList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendListSetFriendListRequest">
            <summary>设置 NetMessageRequest.set_friendList(FriendListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendRemoveGet">
            <summary>设置 NetMessageRequest.get_friendRemove() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.friendRemoveSetFriendRemoveRequest">
            <summary>设置 NetMessageRequest.set_friendRemove(FriendRemoveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.gameEnterGet">
            <summary>设置 NetMessageRequest.get_gameEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.gameEnterSetUserGameEnterRequest">
            <summary>设置 NetMessageRequest.set_gameEnter(UserGameEnterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.gameLeaveGet">
            <summary>设置 NetMessageRequest.get_gameLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.gameLeaveSetUserGameLeaveRequest">
            <summary>设置 NetMessageRequest.set_gameLeave(UserGameLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessageRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildAdminGet">
            <summary>设置 NetMessageRequest.get_guildAdmin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildAdminSetGuildAdminRequest">
            <summary>设置 NetMessageRequest.set_guildAdmin(GuildAdminRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildCreateGet">
            <summary>设置 NetMessageRequest.get_guildCreate() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildCreateSetGuildCreateRequest">
            <summary>设置 NetMessageRequest.set_guildCreate(GuildCreateRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildJoinReqGet">
            <summary>设置 NetMessageRequest.get_guildJoinReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildJoinReqSetGuildJoinRequest">
            <summary>设置 NetMessageRequest.set_guildJoinReq(GuildJoinRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildJoinResGet">
            <summary>设置 NetMessageRequest.get_guildJoinRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildJoinResSetGuildJoinResponse">
            <summary>设置 NetMessageRequest.set_guildJoinRes(GuildJoinResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildLeaveGet">
            <summary>设置 NetMessageRequest.get_guildLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildLeaveSetGuildLeaveRequest">
            <summary>设置 NetMessageRequest.set_guildLeave(GuildLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildListGet">
            <summary>设置 NetMessageRequest.get_guildList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.guildListSetGuildListRequest">
            <summary>设置 NetMessageRequest.set_guildList(GuildListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.itemBuyGet">
            <summary>设置 NetMessageRequest.get_itemBuy() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.itemBuySetItemBuyRequest">
            <summary>设置 NetMessageRequest.set_itemBuy(ItemBuyRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.itemEquipGet">
            <summary>设置 NetMessageRequest.get_itemEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.itemEquipSetItemEquipRequest">
            <summary>设置 NetMessageRequest.set_itemEquip(ItemEquipRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapCharacterEnterGet">
            <summary>设置 NetMessageRequest.get_mapCharacterEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapCharacterEnterSetMapCharacterEnterRequest">
            <summary>设置 NetMessageRequest.set_mapCharacterEnter(MapCharacterEnterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapEntitySyncGet">
            <summary>设置 NetMessageRequest.get_mapEntitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapEntitySyncSetMapEntitySyncRequest">
            <summary>设置 NetMessageRequest.set_mapEntitySync(MapEntitySyncRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapTeleportGet">
            <summary>设置 NetMessageRequest.get_mapTeleport() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.mapTeleportSetMapTeleportRequest">
            <summary>设置 NetMessageRequest.set_mapTeleport(MapTeleportRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questAcceptGet">
            <summary>设置 NetMessageRequest.get_questAccept() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questAcceptSetQuestAcceptRequest">
            <summary>设置 NetMessageRequest.set_questAccept(QuestAcceptRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questListGet">
            <summary>设置 NetMessageRequest.get_questList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questListSetQuestListRequest">
            <summary>设置 NetMessageRequest.set_questList(QuestListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questSubmitGet">
            <summary>设置 NetMessageRequest.get_questSubmit() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.questSubmitSetQuestSubmitRequest">
            <summary>设置 NetMessageRequest.set_questSubmit(QuestSubmitRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInfoGet">
            <summary>设置 NetMessageRequest.get_teamInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInfoSetTeamInfoRequest">
            <summary>设置 NetMessageRequest.set_teamInfo(TeamInfoRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInviteReqGet">
            <summary>设置 NetMessageRequest.get_teamInviteReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInviteReqSetTeamInviteRequest">
            <summary>设置 NetMessageRequest.set_teamInviteReq(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInviteResGet">
            <summary>设置 NetMessageRequest.get_teamInviteRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamInviteResSetTeamInviteResponse">
            <summary>设置 NetMessageRequest.set_teamInviteRes(TeamInviteResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamLeaveGet">
            <summary>设置 NetMessageRequest.get_teamLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.teamLeaveSetTeamLeaveRequest">
            <summary>设置 NetMessageRequest.set_teamLeave(TeamLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.userLoginGet">
            <summary>设置 NetMessageRequest.get_userLogin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.userLoginSetUserLoginRequest">
            <summary>设置 NetMessageRequest.set_userLogin(UserLoginRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.userRegisterGet">
            <summary>设置 NetMessageRequest.get_userRegister() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.AllInstances.userRegisterSetUserRegisterRequest">
            <summary>设置 NetMessageRequest.set_userRegister(UserRegisterRequest value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.ChatGet">
            <summary>设置 NetMessageRequest.get_Chat() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.ChatSetChatRequest">
            <summary>设置 NetMessageRequest.set_Chat(ChatRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.Constructor">
            <summary>设置 NetMessageRequest.NetMessageRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.GuildGet">
            <summary>设置 NetMessageRequest.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.GuildSetGuildRequest">
            <summary>设置 NetMessageRequest.set_Guild(GuildRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.createCharGet">
            <summary>设置 NetMessageRequest.get_createChar() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.createCharSetUserCreateCharacterRequest">
            <summary>设置 NetMessageRequest.set_createChar(UserCreateCharacterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendAddReqGet">
            <summary>设置 NetMessageRequest.get_friendAddReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendAddReqSetFriendAddRequest">
            <summary>设置 NetMessageRequest.set_friendAddReq(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendAddResGet">
            <summary>设置 NetMessageRequest.get_friendAddRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendAddResSetFriendAddResponse">
            <summary>设置 NetMessageRequest.set_friendAddRes(FriendAddResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendListGet">
            <summary>设置 NetMessageRequest.get_friendList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendListSetFriendListRequest">
            <summary>设置 NetMessageRequest.set_friendList(FriendListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendRemoveGet">
            <summary>设置 NetMessageRequest.get_friendRemove() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.friendRemoveSetFriendRemoveRequest">
            <summary>设置 NetMessageRequest.set_friendRemove(FriendRemoveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.gameEnterGet">
            <summary>设置 NetMessageRequest.get_gameEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.gameEnterSetUserGameEnterRequest">
            <summary>设置 NetMessageRequest.set_gameEnter(UserGameEnterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.gameLeaveGet">
            <summary>设置 NetMessageRequest.get_gameLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.gameLeaveSetUserGameLeaveRequest">
            <summary>设置 NetMessageRequest.set_gameLeave(UserGameLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessageRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildAdminGet">
            <summary>设置 NetMessageRequest.get_guildAdmin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildAdminSetGuildAdminRequest">
            <summary>设置 NetMessageRequest.set_guildAdmin(GuildAdminRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildCreateGet">
            <summary>设置 NetMessageRequest.get_guildCreate() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildCreateSetGuildCreateRequest">
            <summary>设置 NetMessageRequest.set_guildCreate(GuildCreateRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildJoinReqGet">
            <summary>设置 NetMessageRequest.get_guildJoinReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildJoinReqSetGuildJoinRequest">
            <summary>设置 NetMessageRequest.set_guildJoinReq(GuildJoinRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildJoinResGet">
            <summary>设置 NetMessageRequest.get_guildJoinRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildJoinResSetGuildJoinResponse">
            <summary>设置 NetMessageRequest.set_guildJoinRes(GuildJoinResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildLeaveGet">
            <summary>设置 NetMessageRequest.get_guildLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildLeaveSetGuildLeaveRequest">
            <summary>设置 NetMessageRequest.set_guildLeave(GuildLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildListGet">
            <summary>设置 NetMessageRequest.get_guildList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.guildListSetGuildListRequest">
            <summary>设置 NetMessageRequest.set_guildList(GuildListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.itemBuyGet">
            <summary>设置 NetMessageRequest.get_itemBuy() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.itemBuySetItemBuyRequest">
            <summary>设置 NetMessageRequest.set_itemBuy(ItemBuyRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.itemEquipGet">
            <summary>设置 NetMessageRequest.get_itemEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.itemEquipSetItemEquipRequest">
            <summary>设置 NetMessageRequest.set_itemEquip(ItemEquipRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapCharacterEnterGet">
            <summary>设置 NetMessageRequest.get_mapCharacterEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapCharacterEnterSetMapCharacterEnterRequest">
            <summary>设置 NetMessageRequest.set_mapCharacterEnter(MapCharacterEnterRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapEntitySyncGet">
            <summary>设置 NetMessageRequest.get_mapEntitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapEntitySyncSetMapEntitySyncRequest">
            <summary>设置 NetMessageRequest.set_mapEntitySync(MapEntitySyncRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapTeleportGet">
            <summary>设置 NetMessageRequest.get_mapTeleport() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.mapTeleportSetMapTeleportRequest">
            <summary>设置 NetMessageRequest.set_mapTeleport(MapTeleportRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questAcceptGet">
            <summary>设置 NetMessageRequest.get_questAccept() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questAcceptSetQuestAcceptRequest">
            <summary>设置 NetMessageRequest.set_questAccept(QuestAcceptRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questListGet">
            <summary>设置 NetMessageRequest.get_questList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questListSetQuestListRequest">
            <summary>设置 NetMessageRequest.set_questList(QuestListRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questSubmitGet">
            <summary>设置 NetMessageRequest.get_questSubmit() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.questSubmitSetQuestSubmitRequest">
            <summary>设置 NetMessageRequest.set_questSubmit(QuestSubmitRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInfoGet">
            <summary>设置 NetMessageRequest.get_teamInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInfoSetTeamInfoRequest">
            <summary>设置 NetMessageRequest.set_teamInfo(TeamInfoRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInviteReqGet">
            <summary>设置 NetMessageRequest.get_teamInviteReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInviteReqSetTeamInviteRequest">
            <summary>设置 NetMessageRequest.set_teamInviteReq(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInviteResGet">
            <summary>设置 NetMessageRequest.get_teamInviteRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamInviteResSetTeamInviteResponse">
            <summary>设置 NetMessageRequest.set_teamInviteRes(TeamInviteResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamLeaveGet">
            <summary>设置 NetMessageRequest.get_teamLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.teamLeaveSetTeamLeaveRequest">
            <summary>设置 NetMessageRequest.set_teamLeave(TeamLeaveRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.userLoginGet">
            <summary>设置 NetMessageRequest.get_userLogin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.userLoginSetUserLoginRequest">
            <summary>设置 NetMessageRequest.set_userLogin(UserLoginRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.userRegisterGet">
            <summary>设置 NetMessageRequest.get_userRegister() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageRequest.userRegisterSetUserRegisterRequest">
            <summary>设置 NetMessageRequest.set_userRegister(UserRegisterRequest value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessageResponse">
            <summary>Charlotte.Proto.NetMessageResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageResponse.#ctor(Charlotte.Proto.NetMessageResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.ChatGet">
            <summary>设置 NetMessageResponse.get_Chat() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.ChatSetChatResponse">
            <summary>设置 NetMessageResponse.set_Chat(ChatResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.GuildGet">
            <summary>设置 NetMessageResponse.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.GuildSetGuildResponse">
            <summary>设置 NetMessageResponse.set_Guild(GuildResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.createCharGet">
            <summary>设置 NetMessageResponse.get_createChar() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.createCharSetUserCreateCharacterResponse">
            <summary>设置 NetMessageResponse.set_createChar(UserCreateCharacterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendAddReqGet">
            <summary>设置 NetMessageResponse.get_friendAddReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendAddReqSetFriendAddRequest">
            <summary>设置 NetMessageResponse.set_friendAddReq(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendAddResGet">
            <summary>设置 NetMessageResponse.get_friendAddRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendAddResSetFriendAddResponse">
            <summary>设置 NetMessageResponse.set_friendAddRes(FriendAddResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendListGet">
            <summary>设置 NetMessageResponse.get_friendList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendListSetFriendListResponse">
            <summary>设置 NetMessageResponse.set_friendList(FriendListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendRemoveGet">
            <summary>设置 NetMessageResponse.get_friendRemove() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.friendRemoveSetFriendRemoveResponse">
            <summary>设置 NetMessageResponse.set_friendRemove(FriendRemoveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.gameEnterGet">
            <summary>设置 NetMessageResponse.get_gameEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.gameEnterSetUserGameEnterResponse">
            <summary>设置 NetMessageResponse.set_gameEnter(UserGameEnterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.gameLeaveGet">
            <summary>设置 NetMessageResponse.get_gameLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.gameLeaveSetUserGameLeaveResponse">
            <summary>设置 NetMessageResponse.set_gameLeave(UserGameLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessageResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildAdminGet">
            <summary>设置 NetMessageResponse.get_guildAdmin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildAdminSetGuildAdminRespnonse">
            <summary>设置 NetMessageResponse.set_guildAdmin(GuildAdminRespnonse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildCreateGet">
            <summary>设置 NetMessageResponse.get_guildCreate() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildCreateSetGuildCreateResponse">
            <summary>设置 NetMessageResponse.set_guildCreate(GuildCreateResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildJoinReqGet">
            <summary>设置 NetMessageResponse.get_guildJoinReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildJoinReqSetGuildJoinRequest">
            <summary>设置 NetMessageResponse.set_guildJoinReq(GuildJoinRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildJoinResGet">
            <summary>设置 NetMessageResponse.get_guildJoinRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildJoinResSetGuildJoinResponse">
            <summary>设置 NetMessageResponse.set_guildJoinRes(GuildJoinResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildLeaveGet">
            <summary>设置 NetMessageResponse.get_guildLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildLeaveSetGuildLeaveResponse">
            <summary>设置 NetMessageResponse.set_guildLeave(GuildLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildListGet">
            <summary>设置 NetMessageResponse.get_guildList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.guildListSetGuildListResponse">
            <summary>设置 NetMessageResponse.set_guildList(GuildListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.itemBuyGet">
            <summary>设置 NetMessageResponse.get_itemBuy() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.itemBuySetItemBuyResponse">
            <summary>设置 NetMessageResponse.set_itemBuy(ItemBuyResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.itemEquipGet">
            <summary>设置 NetMessageResponse.get_itemEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.itemEquipSetItemEquipResponse">
            <summary>设置 NetMessageResponse.set_itemEquip(ItemEquipResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapCharacterEnterGet">
            <summary>设置 NetMessageResponse.get_mapCharacterEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapCharacterEnterSetMapCharacterEnterResponse">
            <summary>设置 NetMessageResponse.set_mapCharacterEnter(MapCharacterEnterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapCharacterLeaveGet">
            <summary>设置 NetMessageResponse.get_mapCharacterLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapCharacterLeaveSetMapCharacterLeaveResponse">
            <summary>设置 NetMessageResponse.set_mapCharacterLeave(MapCharacterLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapEntitySyncGet">
            <summary>设置 NetMessageResponse.get_mapEntitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.mapEntitySyncSetMapEntitySyncResponse">
            <summary>设置 NetMessageResponse.set_mapEntitySync(MapEntitySyncResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questAcceptGet">
            <summary>设置 NetMessageResponse.get_questAccept() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questAcceptSetQuestAcceptResponse">
            <summary>设置 NetMessageResponse.set_questAccept(QuestAcceptResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questListGet">
            <summary>设置 NetMessageResponse.get_questList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questListSetQuestListResponse">
            <summary>设置 NetMessageResponse.set_questList(QuestListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questSubmitGet">
            <summary>设置 NetMessageResponse.get_questSubmit() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.questSubmitSetQuestSubmitResponse">
            <summary>设置 NetMessageResponse.set_questSubmit(QuestSubmitResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.stateNotifyGet">
            <summary>设置 NetMessageResponse.get_stateNotify() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.stateNotifySetStateNotify">
            <summary>设置 NetMessageResponse.set_stateNotify(StateNotify value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInfoGet">
            <summary>设置 NetMessageResponse.get_teamInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInfoSetTeamInfoResponse">
            <summary>设置 NetMessageResponse.set_teamInfo(TeamInfoResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInviteReqGet">
            <summary>设置 NetMessageResponse.get_teamInviteReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInviteReqSetTeamInviteRequest">
            <summary>设置 NetMessageResponse.set_teamInviteReq(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInviteResGet">
            <summary>设置 NetMessageResponse.get_teamInviteRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamInviteResSetTeamInviteResponse">
            <summary>设置 NetMessageResponse.set_teamInviteRes(TeamInviteResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamLeaveGet">
            <summary>设置 NetMessageResponse.get_teamLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.teamLeaveSetTeamLeaveResponse">
            <summary>设置 NetMessageResponse.set_teamLeave(TeamLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.userLoginGet">
            <summary>设置 NetMessageResponse.get_userLogin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.userLoginSetUserLoginResponse">
            <summary>设置 NetMessageResponse.set_userLogin(UserLoginResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.userRegisterGet">
            <summary>设置 NetMessageResponse.get_userRegister() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.AllInstances.userRegisterSetUserRegisterResponse">
            <summary>设置 NetMessageResponse.set_userRegister(UserRegisterResponse value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimNetMessageResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.ChatGet">
            <summary>设置 NetMessageResponse.get_Chat() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.ChatSetChatResponse">
            <summary>设置 NetMessageResponse.set_Chat(ChatResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.Constructor">
            <summary>设置 NetMessageResponse.NetMessageResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.GuildGet">
            <summary>设置 NetMessageResponse.get_Guild() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.GuildSetGuildResponse">
            <summary>设置 NetMessageResponse.set_Guild(GuildResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.createCharGet">
            <summary>设置 NetMessageResponse.get_createChar() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.createCharSetUserCreateCharacterResponse">
            <summary>设置 NetMessageResponse.set_createChar(UserCreateCharacterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendAddReqGet">
            <summary>设置 NetMessageResponse.get_friendAddReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendAddReqSetFriendAddRequest">
            <summary>设置 NetMessageResponse.set_friendAddReq(FriendAddRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendAddResGet">
            <summary>设置 NetMessageResponse.get_friendAddRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendAddResSetFriendAddResponse">
            <summary>设置 NetMessageResponse.set_friendAddRes(FriendAddResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendListGet">
            <summary>设置 NetMessageResponse.get_friendList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendListSetFriendListResponse">
            <summary>设置 NetMessageResponse.set_friendList(FriendListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendRemoveGet">
            <summary>设置 NetMessageResponse.get_friendRemove() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.friendRemoveSetFriendRemoveResponse">
            <summary>设置 NetMessageResponse.set_friendRemove(FriendRemoveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.gameEnterGet">
            <summary>设置 NetMessageResponse.get_gameEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.gameEnterSetUserGameEnterResponse">
            <summary>设置 NetMessageResponse.set_gameEnter(UserGameEnterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.gameLeaveGet">
            <summary>设置 NetMessageResponse.get_gameLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.gameLeaveSetUserGameLeaveResponse">
            <summary>设置 NetMessageResponse.set_gameLeave(UserGameLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 NetMessageResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildAdminGet">
            <summary>设置 NetMessageResponse.get_guildAdmin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildAdminSetGuildAdminRespnonse">
            <summary>设置 NetMessageResponse.set_guildAdmin(GuildAdminRespnonse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildCreateGet">
            <summary>设置 NetMessageResponse.get_guildCreate() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildCreateSetGuildCreateResponse">
            <summary>设置 NetMessageResponse.set_guildCreate(GuildCreateResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildJoinReqGet">
            <summary>设置 NetMessageResponse.get_guildJoinReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildJoinReqSetGuildJoinRequest">
            <summary>设置 NetMessageResponse.set_guildJoinReq(GuildJoinRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildJoinResGet">
            <summary>设置 NetMessageResponse.get_guildJoinRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildJoinResSetGuildJoinResponse">
            <summary>设置 NetMessageResponse.set_guildJoinRes(GuildJoinResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildLeaveGet">
            <summary>设置 NetMessageResponse.get_guildLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildLeaveSetGuildLeaveResponse">
            <summary>设置 NetMessageResponse.set_guildLeave(GuildLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildListGet">
            <summary>设置 NetMessageResponse.get_guildList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.guildListSetGuildListResponse">
            <summary>设置 NetMessageResponse.set_guildList(GuildListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.itemBuyGet">
            <summary>设置 NetMessageResponse.get_itemBuy() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.itemBuySetItemBuyResponse">
            <summary>设置 NetMessageResponse.set_itemBuy(ItemBuyResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.itemEquipGet">
            <summary>设置 NetMessageResponse.get_itemEquip() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.itemEquipSetItemEquipResponse">
            <summary>设置 NetMessageResponse.set_itemEquip(ItemEquipResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapCharacterEnterGet">
            <summary>设置 NetMessageResponse.get_mapCharacterEnter() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapCharacterEnterSetMapCharacterEnterResponse">
            <summary>设置 NetMessageResponse.set_mapCharacterEnter(MapCharacterEnterResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapCharacterLeaveGet">
            <summary>设置 NetMessageResponse.get_mapCharacterLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapCharacterLeaveSetMapCharacterLeaveResponse">
            <summary>设置 NetMessageResponse.set_mapCharacterLeave(MapCharacterLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapEntitySyncGet">
            <summary>设置 NetMessageResponse.get_mapEntitySync() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.mapEntitySyncSetMapEntitySyncResponse">
            <summary>设置 NetMessageResponse.set_mapEntitySync(MapEntitySyncResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questAcceptGet">
            <summary>设置 NetMessageResponse.get_questAccept() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questAcceptSetQuestAcceptResponse">
            <summary>设置 NetMessageResponse.set_questAccept(QuestAcceptResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questListGet">
            <summary>设置 NetMessageResponse.get_questList() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questListSetQuestListResponse">
            <summary>设置 NetMessageResponse.set_questList(QuestListResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questSubmitGet">
            <summary>设置 NetMessageResponse.get_questSubmit() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.questSubmitSetQuestSubmitResponse">
            <summary>设置 NetMessageResponse.set_questSubmit(QuestSubmitResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.stateNotifyGet">
            <summary>设置 NetMessageResponse.get_stateNotify() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.stateNotifySetStateNotify">
            <summary>设置 NetMessageResponse.set_stateNotify(StateNotify value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInfoGet">
            <summary>设置 NetMessageResponse.get_teamInfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInfoSetTeamInfoResponse">
            <summary>设置 NetMessageResponse.set_teamInfo(TeamInfoResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInviteReqGet">
            <summary>设置 NetMessageResponse.get_teamInviteReq() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInviteReqSetTeamInviteRequest">
            <summary>设置 NetMessageResponse.set_teamInviteReq(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInviteResGet">
            <summary>设置 NetMessageResponse.get_teamInviteRes() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamInviteResSetTeamInviteResponse">
            <summary>设置 NetMessageResponse.set_teamInviteRes(TeamInviteResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamLeaveGet">
            <summary>设置 NetMessageResponse.get_teamLeave() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.teamLeaveSetTeamLeaveResponse">
            <summary>设置 NetMessageResponse.set_teamLeave(TeamLeaveResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.userLoginGet">
            <summary>设置 NetMessageResponse.get_userLogin() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.userLoginSetUserLoginResponse">
            <summary>设置 NetMessageResponse.set_userLogin(UserLoginResponse value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.userRegisterGet">
            <summary>设置 NetMessageResponse.get_userRegister() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimNetMessageResponse.userRegisterSetUserRegisterResponse">
            <summary>设置 NetMessageResponse.set_userRegister(UserRegisterResponse value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAbandonRequest">
            <summary>Charlotte.Proto.QuestAbandonRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.#ctor(Charlotte.Proto.QuestAbandonRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.AllInstances.QuestIdGet">
            <summary>设置 QuestAbandonRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.AllInstances.QuestIdSetInt32">
            <summary>设置 QuestAbandonRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAbandonRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.Constructor">
            <summary>设置 QuestAbandonRequest.QuestAbandonRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.QuestIdGet">
            <summary>设置 QuestAbandonRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.QuestIdSetInt32">
            <summary>设置 QuestAbandonRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAbandonRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAbandonResponse">
            <summary>Charlotte.Proto.QuestAbandonResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.#ctor(Charlotte.Proto.QuestAbandonResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances.ErrorcodeGet">
            <summary>设置 QuestAbandonResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 QuestAbandonResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances.ResultGet">
            <summary>设置 QuestAbandonResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances.ResultSetResult">
            <summary>设置 QuestAbandonResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAbandonResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.Constructor">
            <summary>设置 QuestAbandonResponse.QuestAbandonResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.ErrorcodeGet">
            <summary>设置 QuestAbandonResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.ErrorcodeSetUInt32">
            <summary>设置 QuestAbandonResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.ResultGet">
            <summary>设置 QuestAbandonResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.ResultSetResult">
            <summary>设置 QuestAbandonResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAbandonResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAbandonResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAcceptRequest">
            <summary>Charlotte.Proto.QuestAcceptRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.#ctor(Charlotte.Proto.QuestAcceptRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.AllInstances.QuestIdGet">
            <summary>设置 QuestAcceptRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.AllInstances.QuestIdSetInt32">
            <summary>设置 QuestAcceptRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAcceptRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.Constructor">
            <summary>设置 QuestAcceptRequest.QuestAcceptRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.QuestIdGet">
            <summary>设置 QuestAcceptRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.QuestIdSetInt32">
            <summary>设置 QuestAcceptRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAcceptRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAcceptResponse">
            <summary>Charlotte.Proto.QuestAcceptResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.#ctor(Charlotte.Proto.QuestAcceptResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.ErrorcodeGet">
            <summary>设置 QuestAcceptResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 QuestAcceptResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.QuestGet">
            <summary>设置 QuestAcceptResponse.get_Quest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.QuestSetNQuestInfo">
            <summary>设置 QuestAcceptResponse.set_Quest(NQuestInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.ResultGet">
            <summary>设置 QuestAcceptResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.ResultSetResult">
            <summary>设置 QuestAcceptResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAcceptResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.Constructor">
            <summary>设置 QuestAcceptResponse.QuestAcceptResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.ErrorcodeGet">
            <summary>设置 QuestAcceptResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.ErrorcodeSetUInt32">
            <summary>设置 QuestAcceptResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.QuestGet">
            <summary>设置 QuestAcceptResponse.get_Quest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.QuestSetNQuestInfo">
            <summary>设置 QuestAcceptResponse.set_Quest(NQuestInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.ResultGet">
            <summary>设置 QuestAcceptResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.ResultSetResult">
            <summary>设置 QuestAcceptResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestAcceptResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestAcceptResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestListRequest">
            <summary>Charlotte.Proto.QuestListRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListRequest.#ctor(Charlotte.Proto.QuestListRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestListRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.AllInstances.listTypeGet">
            <summary>设置 QuestListRequest.get_listType() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.AllInstances.listTypeSetQuestListType">
            <summary>设置 QuestListRequest.set_listType(QuestListType value) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.Constructor">
            <summary>设置 QuestListRequest.QuestListRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestListRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.listTypeGet">
            <summary>设置 QuestListRequest.get_listType() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListRequest.listTypeSetQuestListType">
            <summary>设置 QuestListRequest.set_listType(QuestListType value) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestListResponse">
            <summary>Charlotte.Proto.QuestListResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListResponse.#ctor(Charlotte.Proto.QuestListResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.ErrorcodeGet">
            <summary>设置 QuestListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 QuestListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.QuestsGet">
            <summary>设置 QuestListResponse.get_Quests() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.ResultGet">
            <summary>设置 QuestListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.ResultSetResult">
            <summary>设置 QuestListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestListResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.Constructor">
            <summary>设置 QuestListResponse.QuestListResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.ErrorcodeGet">
            <summary>设置 QuestListResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.ErrorcodeSetUInt32">
            <summary>设置 QuestListResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.QuestsGet">
            <summary>设置 QuestListResponse.get_Quests() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.ResultGet">
            <summary>设置 QuestListResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.ResultSetResult">
            <summary>设置 QuestListResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestListResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestListResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestSubmitRequest">
            <summary>Charlotte.Proto.QuestSubmitRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.#ctor(Charlotte.Proto.QuestSubmitRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.AllInstances.QuestIdGet">
            <summary>设置 QuestSubmitRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.AllInstances.QuestIdSetInt32">
            <summary>设置 QuestSubmitRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestSubmitRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.Constructor">
            <summary>设置 QuestSubmitRequest.QuestSubmitRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.QuestIdGet">
            <summary>设置 QuestSubmitRequest.get_QuestId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.QuestIdSetInt32">
            <summary>设置 QuestSubmitRequest.set_QuestId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestSubmitRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestSubmitResponse">
            <summary>Charlotte.Proto.QuestSubmitResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.#ctor(Charlotte.Proto.QuestSubmitResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.ErrorcodeGet">
            <summary>设置 QuestSubmitResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 QuestSubmitResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.QuestGet">
            <summary>设置 QuestSubmitResponse.get_Quest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.QuestSetNQuestInfo">
            <summary>设置 QuestSubmitResponse.set_Quest(NQuestInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.ResultGet">
            <summary>设置 QuestSubmitResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.ResultSetResult">
            <summary>设置 QuestSubmitResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestSubmitResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.Constructor">
            <summary>设置 QuestSubmitResponse.QuestSubmitResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.ErrorcodeGet">
            <summary>设置 QuestSubmitResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.ErrorcodeSetUInt32">
            <summary>设置 QuestSubmitResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.QuestGet">
            <summary>设置 QuestSubmitResponse.get_Quest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.QuestSetNQuestInfo">
            <summary>设置 QuestSubmitResponse.set_Quest(NQuestInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.ResultGet">
            <summary>设置 QuestSubmitResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.ResultSetResult">
            <summary>设置 QuestSubmitResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimQuestSubmitResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 QuestSubmitResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimStateNotify">
            <summary>Charlotte.Proto.StateNotify 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimStateNotify.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimStateNotify.#ctor(Charlotte.Proto.StateNotify)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimStateNotify.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.AllInstances.StatusGet">
            <summary>设置 StateNotify.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 StateNotify.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimStateNotify.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimStateNotify.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimStateNotify.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.Constructor">
            <summary>设置 StateNotify.StateNotify() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.StatusGet">
            <summary>设置 StateNotify.get_Status() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimStateNotify.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 StateNotify.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInfoRequest">
            <summary>Charlotte.Proto.TeamInfoRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoRequest.#ctor(Charlotte.Proto.TeamInfoRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInfoRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInfoRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoRequest.Constructor">
            <summary>设置 TeamInfoRequest.TeamInfoRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInfoRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInfoResponse">
            <summary>Charlotte.Proto.TeamInfoResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoResponse.#ctor(Charlotte.Proto.TeamInfoResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.ErrorcodeGet">
            <summary>设置 TeamInfoResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 TeamInfoResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.ResultGet">
            <summary>设置 TeamInfoResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.ResultSetResult">
            <summary>设置 TeamInfoResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.TeamGet">
            <summary>设置 TeamInfoResponse.get_Team() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.TeamSetNTeamInfo">
            <summary>设置 TeamInfoResponse.set_Team(NTeamInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInfoResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInfoResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.Constructor">
            <summary>设置 TeamInfoResponse.TeamInfoResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.ErrorcodeGet">
            <summary>设置 TeamInfoResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.ErrorcodeSetUInt32">
            <summary>设置 TeamInfoResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.ResultGet">
            <summary>设置 TeamInfoResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.ResultSetResult">
            <summary>设置 TeamInfoResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.TeamGet">
            <summary>设置 TeamInfoResponse.get_Team() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.TeamSetNTeamInfo">
            <summary>设置 TeamInfoResponse.set_Team(NTeamInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInfoResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInfoResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInviteRequest">
            <summary>Charlotte.Proto.TeamInviteRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteRequest.#ctor(Charlotte.Proto.TeamInviteRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.FromIdGet">
            <summary>设置 TeamInviteRequest.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.FromIdSetInt32">
            <summary>设置 TeamInviteRequest.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.FromNameGet">
            <summary>设置 TeamInviteRequest.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.FromNameSetString">
            <summary>设置 TeamInviteRequest.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.TeamIdGet">
            <summary>设置 TeamInviteRequest.get_TeamId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.TeamIdSetInt32">
            <summary>设置 TeamInviteRequest.set_TeamId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.ToIdGet">
            <summary>设置 TeamInviteRequest.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.ToIdSetInt32">
            <summary>设置 TeamInviteRequest.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.ToNameGet">
            <summary>设置 TeamInviteRequest.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.ToNameSetString">
            <summary>设置 TeamInviteRequest.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInviteRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.Constructor">
            <summary>设置 TeamInviteRequest.TeamInviteRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.FromIdGet">
            <summary>设置 TeamInviteRequest.get_FromId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.FromIdSetInt32">
            <summary>设置 TeamInviteRequest.set_FromId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.FromNameGet">
            <summary>设置 TeamInviteRequest.get_FromName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.FromNameSetString">
            <summary>设置 TeamInviteRequest.set_FromName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.TeamIdGet">
            <summary>设置 TeamInviteRequest.get_TeamId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.TeamIdSetInt32">
            <summary>设置 TeamInviteRequest.set_TeamId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.ToIdGet">
            <summary>设置 TeamInviteRequest.get_ToId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.ToIdSetInt32">
            <summary>设置 TeamInviteRequest.set_ToId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.ToNameGet">
            <summary>设置 TeamInviteRequest.get_ToName() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.ToNameSetString">
            <summary>设置 TeamInviteRequest.set_ToName(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInviteRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInviteResponse">
            <summary>Charlotte.Proto.TeamInviteResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteResponse.#ctor(Charlotte.Proto.TeamInviteResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.ErrorcodeGet">
            <summary>设置 TeamInviteResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 TeamInviteResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.RequestGet">
            <summary>设置 TeamInviteResponse.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.RequestSetTeamInviteRequest">
            <summary>设置 TeamInviteResponse.set_Request(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.ResultGet">
            <summary>设置 TeamInviteResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.ResultSetResult">
            <summary>设置 TeamInviteResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInviteResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamInviteResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.Constructor">
            <summary>设置 TeamInviteResponse.TeamInviteResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.ErrorcodeGet">
            <summary>设置 TeamInviteResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.ErrorcodeSetUInt32">
            <summary>设置 TeamInviteResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.RequestGet">
            <summary>设置 TeamInviteResponse.get_Request() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.RequestSetTeamInviteRequest">
            <summary>设置 TeamInviteResponse.set_Request(TeamInviteRequest value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.ResultGet">
            <summary>设置 TeamInviteResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.ResultSetResult">
            <summary>设置 TeamInviteResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamInviteResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamInviteResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamLeaveRequest">
            <summary>Charlotte.Proto.TeamLeaveRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.#ctor(Charlotte.Proto.TeamLeaveRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances.TeamIdGet">
            <summary>设置 TeamLeaveRequest.get_TeamId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances.TeamIdSetInt32">
            <summary>设置 TeamLeaveRequest.set_TeamId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances.characterIdGet">
            <summary>设置 TeamLeaveRequest.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances.characterIdSetInt32">
            <summary>设置 TeamLeaveRequest.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.Constructor">
            <summary>设置 TeamLeaveRequest.TeamLeaveRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.TeamIdGet">
            <summary>设置 TeamLeaveRequest.get_TeamId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.TeamIdSetInt32">
            <summary>设置 TeamLeaveRequest.set_TeamId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.characterIdGet">
            <summary>设置 TeamLeaveRequest.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.characterIdSetInt32">
            <summary>设置 TeamLeaveRequest.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamLeaveResponse">
            <summary>Charlotte.Proto.TeamLeaveResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.#ctor(Charlotte.Proto.TeamLeaveResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.ErrorcodeGet">
            <summary>设置 TeamLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 TeamLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.ResultGet">
            <summary>设置 TeamLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.ResultSetResult">
            <summary>设置 TeamLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.characterIdGet">
            <summary>设置 TeamLeaveResponse.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.characterIdSetInt32">
            <summary>设置 TeamLeaveResponse.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.Constructor">
            <summary>设置 TeamLeaveResponse.TeamLeaveResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.ErrorcodeGet">
            <summary>设置 TeamLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.ErrorcodeSetUInt32">
            <summary>设置 TeamLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.ResultGet">
            <summary>设置 TeamLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.ResultSetResult">
            <summary>设置 TeamLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.characterIdGet">
            <summary>设置 TeamLeaveResponse.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.characterIdSetInt32">
            <summary>设置 TeamLeaveResponse.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimTeamLeaveResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 TeamLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest">
            <summary>Charlotte.Proto.UserCreateCharacterRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.#ctor(Charlotte.Proto.UserCreateCharacterRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances.ClassGet">
            <summary>设置 UserCreateCharacterRequest.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances.ClassSetCharacterClass">
            <summary>设置 UserCreateCharacterRequest.set_Class(CharacterClass value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances.NameGet">
            <summary>设置 UserCreateCharacterRequest.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances.NameSetString">
            <summary>设置 UserCreateCharacterRequest.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserCreateCharacterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.ClassGet">
            <summary>设置 UserCreateCharacterRequest.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.ClassSetCharacterClass">
            <summary>设置 UserCreateCharacterRequest.set_Class(CharacterClass value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.Constructor">
            <summary>设置 UserCreateCharacterRequest.UserCreateCharacterRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.NameGet">
            <summary>设置 UserCreateCharacterRequest.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.NameSetString">
            <summary>设置 UserCreateCharacterRequest.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserCreateCharacterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse">
            <summary>Charlotte.Proto.UserCreateCharacterResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.#ctor(Charlotte.Proto.UserCreateCharacterResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.CharactersGet">
            <summary>设置 UserCreateCharacterResponse.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.ErrorcodeGet">
            <summary>设置 UserCreateCharacterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 UserCreateCharacterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.ResultGet">
            <summary>设置 UserCreateCharacterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.ResultSetResult">
            <summary>设置 UserCreateCharacterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserCreateCharacterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.CharactersGet">
            <summary>设置 UserCreateCharacterResponse.get_Characters() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.Constructor">
            <summary>设置 UserCreateCharacterResponse.UserCreateCharacterResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.ErrorcodeGet">
            <summary>设置 UserCreateCharacterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.ErrorcodeSetUInt32">
            <summary>设置 UserCreateCharacterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.ResultGet">
            <summary>设置 UserCreateCharacterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.ResultSetResult">
            <summary>设置 UserCreateCharacterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserCreateCharacterResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserCreateCharacterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameEnterRequest">
            <summary>Charlotte.Proto.UserGameEnterRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.#ctor(Charlotte.Proto.UserGameEnterRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances.characterIdGet">
            <summary>设置 UserGameEnterRequest.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances.characterIdSetInt32">
            <summary>设置 UserGameEnterRequest.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances.characterIdxGet">
            <summary>设置 UserGameEnterRequest.get_characterIdx() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances.characterIdxSetInt32">
            <summary>设置 UserGameEnterRequest.set_characterIdx(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameEnterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.Constructor">
            <summary>设置 UserGameEnterRequest.UserGameEnterRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.characterIdGet">
            <summary>设置 UserGameEnterRequest.get_characterId() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.characterIdSetInt32">
            <summary>设置 UserGameEnterRequest.set_characterId(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.characterIdxGet">
            <summary>设置 UserGameEnterRequest.get_characterIdx() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.characterIdxSetInt32">
            <summary>设置 UserGameEnterRequest.set_characterIdx(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameEnterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameEnterResponse">
            <summary>Charlotte.Proto.UserGameEnterResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.#ctor(Charlotte.Proto.UserGameEnterResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.CharacterGet">
            <summary>设置 UserGameEnterResponse.get_Character() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.CharacterSetNCharacterInfo">
            <summary>设置 UserGameEnterResponse.set_Character(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.ErrorcodeGet">
            <summary>设置 UserGameEnterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 UserGameEnterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.ResultGet">
            <summary>设置 UserGameEnterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.ResultSetResult">
            <summary>设置 UserGameEnterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameEnterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.CharacterGet">
            <summary>设置 UserGameEnterResponse.get_Character() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.CharacterSetNCharacterInfo">
            <summary>设置 UserGameEnterResponse.set_Character(NCharacterInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.Constructor">
            <summary>设置 UserGameEnterResponse.UserGameEnterResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.ErrorcodeGet">
            <summary>设置 UserGameEnterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.ErrorcodeSetUInt32">
            <summary>设置 UserGameEnterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.ResultGet">
            <summary>设置 UserGameEnterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.ResultSetResult">
            <summary>设置 UserGameEnterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameEnterResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameEnterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest">
            <summary>Charlotte.Proto.UserGameLeaveRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.#ctor(Charlotte.Proto.UserGameLeaveRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.Constructor">
            <summary>设置 UserGameLeaveRequest.UserGameLeaveRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameLeaveRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse">
            <summary>Charlotte.Proto.UserGameLeaveResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.#ctor(Charlotte.Proto.UserGameLeaveResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances.ErrorcodeGet">
            <summary>设置 UserGameLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 UserGameLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances.ResultGet">
            <summary>设置 UserGameLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances.ResultSetResult">
            <summary>设置 UserGameLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.Constructor">
            <summary>设置 UserGameLeaveResponse.UserGameLeaveResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.ErrorcodeGet">
            <summary>设置 UserGameLeaveResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.ErrorcodeSetUInt32">
            <summary>设置 UserGameLeaveResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.ResultGet">
            <summary>设置 UserGameLeaveResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.ResultSetResult">
            <summary>设置 UserGameLeaveResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserGameLeaveResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserGameLeaveResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserLoginRequest">
            <summary>Charlotte.Proto.UserLoginRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginRequest.#ctor(Charlotte.Proto.UserLoginRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances.PasswardGet">
            <summary>设置 UserLoginRequest.get_Passward() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances.PasswardSetString">
            <summary>设置 UserLoginRequest.set_Passward(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances.UserGet">
            <summary>设置 UserLoginRequest.get_User() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances.UserSetString">
            <summary>设置 UserLoginRequest.set_User(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserLoginRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.Constructor">
            <summary>设置 UserLoginRequest.UserLoginRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.PasswardGet">
            <summary>设置 UserLoginRequest.get_Passward() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.PasswardSetString">
            <summary>设置 UserLoginRequest.set_Passward(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.UserGet">
            <summary>设置 UserLoginRequest.get_User() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.UserSetString">
            <summary>设置 UserLoginRequest.set_User(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserLoginRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserLoginResponse">
            <summary>Charlotte.Proto.UserLoginResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginResponse.#ctor(Charlotte.Proto.UserLoginResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.ErrorcodeGet">
            <summary>设置 UserLoginResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 UserLoginResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.ResultGet">
            <summary>设置 UserLoginResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.ResultSetResult">
            <summary>设置 UserLoginResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.UserinfoGet">
            <summary>设置 UserLoginResponse.get_Userinfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.UserinfoSetNUserInfo">
            <summary>设置 UserLoginResponse.set_Userinfo(NUserInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserLoginResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserLoginResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.Constructor">
            <summary>设置 UserLoginResponse.UserLoginResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.ErrorcodeGet">
            <summary>设置 UserLoginResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.ErrorcodeSetUInt32">
            <summary>设置 UserLoginResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.ResultGet">
            <summary>设置 UserLoginResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.ResultSetResult">
            <summary>设置 UserLoginResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.UserinfoGet">
            <summary>设置 UserLoginResponse.get_Userinfo() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.UserinfoSetNUserInfo">
            <summary>设置 UserLoginResponse.set_Userinfo(NUserInfo value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserLoginResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserLoginResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserRegisterRequest">
            <summary>Charlotte.Proto.UserRegisterRequest 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterRequest.#ctor(Charlotte.Proto.UserRegisterRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances.PasswardGet">
            <summary>设置 UserRegisterRequest.get_Passward() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances.PasswardSetString">
            <summary>设置 UserRegisterRequest.set_Passward(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances.UserGet">
            <summary>设置 UserRegisterRequest.get_User() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances.UserSetString">
            <summary>设置 UserRegisterRequest.set_User(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserRegisterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterRequest.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.Constructor">
            <summary>设置 UserRegisterRequest.UserRegisterRequest() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.PasswardGet">
            <summary>设置 UserRegisterRequest.get_Passward() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.PasswardSetString">
            <summary>设置 UserRegisterRequest.set_Passward(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.UserGet">
            <summary>设置 UserRegisterRequest.get_User() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.UserSetString">
            <summary>设置 UserRegisterRequest.set_User(String value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterRequest.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserRegisterRequest.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserRegisterResponse">
            <summary>Charlotte.Proto.UserRegisterResponse 的填充码类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterResponse.#ctor(Charlotte.Proto.UserRegisterResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances.ErrorcodeGet">
            <summary>设置 UserRegisterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances.ErrorcodeSetUInt32">
            <summary>设置 UserRegisterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances.ResultGet">
            <summary>设置 UserRegisterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances.ResultSetResult">
            <summary>设置 UserRegisterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.AllInstances.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserRegisterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.ShimUserRegisterResponse.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.Constructor">
            <summary>设置 UserRegisterResponse.UserRegisterResponse() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.ErrorcodeGet">
            <summary>设置 UserRegisterResponse.get_Errorcode() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.ErrorcodeSetUInt32">
            <summary>设置 UserRegisterResponse.set_Errorcode(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.ResultGet">
            <summary>设置 UserRegisterResponse.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.ResultSetResult">
            <summary>设置 UserRegisterResponse.set_Result(Result value) 的 填充码</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.ShimUserRegisterResponse.globalProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 UserRegisterResponse.global::ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubBagSaveRequese">
            <summary>Charlotte.Proto.BagSaveRequese 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubBagSaveRequese.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveRequese.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubBagSaveRequese.InitializeStub">
            <summary>初始化 type StubBagSaveRequese 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveRequese.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveRequese.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubBagSaveResponst">
            <summary>Charlotte.Proto.BagSaveResponst 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubBagSaveResponst.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveResponst.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubBagSaveResponst.InitializeStub">
            <summary>初始化 type StubBagSaveResponst 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveResponst.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubBagSaveResponst.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubChatMessage">
            <summary>Charlotte.Proto.ChatMessage 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatMessage.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatMessage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatMessage.InitializeStub">
            <summary>初始化 type StubChatMessage 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatMessage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatMessage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubChatRequest">
            <summary>Charlotte.Proto.ChatRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatRequest.InitializeStub">
            <summary>初始化 type StubChatRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubChatResponse">
            <summary>Charlotte.Proto.ChatResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubChatResponse.InitializeStub">
            <summary>初始化 type StubChatResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubChatResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendAddRequest">
            <summary>Charlotte.Proto.FriendAddRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendAddRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendAddRequest.InitializeStub">
            <summary>初始化 type StubFriendAddRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendAddResponse">
            <summary>Charlotte.Proto.FriendAddResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendAddResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendAddResponse.InitializeStub">
            <summary>初始化 type StubFriendAddResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendAddResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendListRequest">
            <summary>Charlotte.Proto.FriendListRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendListRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendListRequest.InitializeStub">
            <summary>初始化 type StubFriendListRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendListResponse">
            <summary>Charlotte.Proto.FriendListResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendListResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendListResponse.InitializeStub">
            <summary>初始化 type StubFriendListResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendListResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendRemoveRequest">
            <summary>Charlotte.Proto.FriendRemoveRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendRemoveRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendRemoveRequest.InitializeStub">
            <summary>初始化 type StubFriendRemoveRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubFriendRemoveResponse">
            <summary>Charlotte.Proto.FriendRemoveResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendRemoveResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubFriendRemoveResponse.InitializeStub">
            <summary>初始化 type StubFriendRemoveResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubFriendRemoveResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildAdminRequest">
            <summary>Charlotte.Proto.GuildAdminRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildAdminRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildAdminRequest.InitializeStub">
            <summary>初始化 type StubGuildAdminRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildAdminRespnonse">
            <summary>Charlotte.Proto.GuildAdminRespnonse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildAdminRespnonse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRespnonse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildAdminRespnonse.InitializeStub">
            <summary>初始化 type StubGuildAdminRespnonse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRespnonse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildAdminRespnonse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildCreateRequest">
            <summary>Charlotte.Proto.GuildCreateRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildCreateRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildCreateRequest.InitializeStub">
            <summary>初始化 type StubGuildCreateRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildCreateResponse">
            <summary>Charlotte.Proto.GuildCreateResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildCreateResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildCreateResponse.InitializeStub">
            <summary>初始化 type StubGuildCreateResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildCreateResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildJoinRequest">
            <summary>Charlotte.Proto.GuildJoinRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildJoinRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildJoinRequest.InitializeStub">
            <summary>初始化 type StubGuildJoinRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildJoinResponse">
            <summary>Charlotte.Proto.GuildJoinResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildJoinResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildJoinResponse.InitializeStub">
            <summary>初始化 type StubGuildJoinResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildJoinResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildLeaveRequest">
            <summary>Charlotte.Proto.GuildLeaveRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildLeaveRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildLeaveRequest.InitializeStub">
            <summary>初始化 type StubGuildLeaveRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildLeaveResponse">
            <summary>Charlotte.Proto.GuildLeaveResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildLeaveResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildLeaveResponse.InitializeStub">
            <summary>初始化 type StubGuildLeaveResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildLeaveResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildListRequest">
            <summary>Charlotte.Proto.GuildListRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildListRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildListRequest.InitializeStub">
            <summary>初始化 type StubGuildListRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildListResponse">
            <summary>Charlotte.Proto.GuildListResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildListResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildListResponse.InitializeStub">
            <summary>初始化 type StubGuildListResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildListResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildRequest">
            <summary>Charlotte.Proto.GuildRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildRequest.InitializeStub">
            <summary>初始化 type StubGuildRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubGuildResponse">
            <summary>Charlotte.Proto.GuildResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubGuildResponse.InitializeStub">
            <summary>初始化 type StubGuildResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubGuildResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubItemBuyRequest">
            <summary>Charlotte.Proto.ItemBuyRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemBuyRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemBuyRequest.InitializeStub">
            <summary>初始化 type StubItemBuyRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubItemBuyResponse">
            <summary>Charlotte.Proto.ItemBuyResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemBuyResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemBuyResponse.InitializeStub">
            <summary>初始化 type StubItemBuyResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemBuyResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubItemEquipRequest">
            <summary>Charlotte.Proto.ItemEquipRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemEquipRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemEquipRequest.InitializeStub">
            <summary>初始化 type StubItemEquipRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubItemEquipResponse">
            <summary>Charlotte.Proto.ItemEquipResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemEquipResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubItemEquipResponse.InitializeStub">
            <summary>初始化 type StubItemEquipResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubItemEquipResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest">
            <summary>Charlotte.Proto.MapCharacterEnterRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest.InitializeStub">
            <summary>初始化 type StubMapCharacterEnterRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse">
            <summary>Charlotte.Proto.MapCharacterEnterResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse.InitializeStub">
            <summary>初始化 type StubMapCharacterEnterResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterEnterResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse">
            <summary>Charlotte.Proto.MapCharacterLeaveResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse.InitializeStub">
            <summary>初始化 type StubMapCharacterLeaveResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapCharacterLeaveResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapEntitySyncRequest">
            <summary>Charlotte.Proto.MapEntitySyncRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapEntitySyncRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapEntitySyncRequest.InitializeStub">
            <summary>初始化 type StubMapEntitySyncRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapEntitySyncResponse">
            <summary>Charlotte.Proto.MapEntitySyncResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapEntitySyncResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapEntitySyncResponse.InitializeStub">
            <summary>初始化 type StubMapEntitySyncResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapEntitySyncResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubMapTeleportRequest">
            <summary>Charlotte.Proto.MapTeleportRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapTeleportRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapTeleportRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubMapTeleportRequest.InitializeStub">
            <summary>初始化 type StubMapTeleportRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapTeleportRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubMapTeleportRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNBagInfo">
            <summary>Charlotte.Proto.NBagInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNBagInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNBagInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNBagInfo.InitializeStub">
            <summary>初始化 type StubNBagInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNBagInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNBagInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNCharacterInfo">
            <summary>Charlotte.Proto.NCharacterInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNCharacterInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNCharacterInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNCharacterInfo.InitializeStub">
            <summary>初始化 type StubNCharacterInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNCharacterInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNCharacterInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNEntity">
            <summary>Charlotte.Proto.NEntity 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNEntity.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntity.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNEntity.InitializeStub">
            <summary>初始化 type StubNEntity 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntity.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntity.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNEntitySync">
            <summary>Charlotte.Proto.NEntitySync 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNEntitySync.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntitySync.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNEntitySync.InitializeStub">
            <summary>初始化 type StubNEntitySync 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntitySync.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNEntitySync.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNFriendInfo">
            <summary>Charlotte.Proto.NFriendInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNFriendInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNFriendInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNFriendInfo.InitializeStub">
            <summary>初始化 type StubNFriendInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNFriendInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNFriendInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNGuildApplyInfo">
            <summary>Charlotte.Proto.NGuildApplyInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildApplyInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildApplyInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildApplyInfo.InitializeStub">
            <summary>初始化 type StubNGuildApplyInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildApplyInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildApplyInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNGuildInfo">
            <summary>Charlotte.Proto.NGuildInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildInfo.InitializeStub">
            <summary>初始化 type StubNGuildInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNGuildMemberInfo">
            <summary>Charlotte.Proto.NGuildMemberInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildMemberInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildMemberInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNGuildMemberInfo.InitializeStub">
            <summary>初始化 type StubNGuildMemberInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildMemberInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNGuildMemberInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNItemInfo">
            <summary>Charlotte.Proto.NItemInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNItemInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNItemInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNItemInfo.InitializeStub">
            <summary>初始化 type StubNItemInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNItemInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNItemInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNPlayerInfo">
            <summary>Charlotte.Proto.NPlayerInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNPlayerInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNPlayerInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNPlayerInfo.InitializeStub">
            <summary>初始化 type StubNPlayerInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNPlayerInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNPlayerInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNQuestInfo">
            <summary>Charlotte.Proto.NQuestInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNQuestInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNQuestInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNQuestInfo.InitializeStub">
            <summary>初始化 type StubNQuestInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNQuestInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNQuestInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNStatus">
            <summary>Charlotte.Proto.NStatus 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNStatus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNStatus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNStatus.InitializeStub">
            <summary>初始化 type StubNStatus 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNStatus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNStatus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNTeamInfo">
            <summary>Charlotte.Proto.NTeamInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNTeamInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNTeamInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNTeamInfo.InitializeStub">
            <summary>初始化 type StubNTeamInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNTeamInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNTeamInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNUserInfo">
            <summary>Charlotte.Proto.NUserInfo 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNUserInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNUserInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNUserInfo.InitializeStub">
            <summary>初始化 type StubNUserInfo 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNUserInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNUserInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNVector3">
            <summary>Charlotte.Proto.NVector3 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNVector3.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNVector3.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNVector3.InitializeStub">
            <summary>初始化 type StubNVector3 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNVector3.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNVector3.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNetMessage">
            <summary>Charlotte.Proto.NetMessage 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessage.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessage.InitializeStub">
            <summary>初始化 type StubNetMessage 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNetMessageRequest">
            <summary>Charlotte.Proto.NetMessageRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessageRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessageRequest.InitializeStub">
            <summary>初始化 type StubNetMessageRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubNetMessageResponse">
            <summary>Charlotte.Proto.NetMessageResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessageResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubNetMessageResponse.InitializeStub">
            <summary>初始化 type StubNetMessageResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubNetMessageResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestAbandonRequest">
            <summary>Charlotte.Proto.QuestAbandonRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAbandonRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAbandonRequest.InitializeStub">
            <summary>初始化 type StubQuestAbandonRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestAbandonResponse">
            <summary>Charlotte.Proto.QuestAbandonResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAbandonResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAbandonResponse.InitializeStub">
            <summary>初始化 type StubQuestAbandonResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAbandonResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestAcceptRequest">
            <summary>Charlotte.Proto.QuestAcceptRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAcceptRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAcceptRequest.InitializeStub">
            <summary>初始化 type StubQuestAcceptRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestAcceptResponse">
            <summary>Charlotte.Proto.QuestAcceptResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAcceptResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestAcceptResponse.InitializeStub">
            <summary>初始化 type StubQuestAcceptResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestAcceptResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestListRequest">
            <summary>Charlotte.Proto.QuestListRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestListRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestListRequest.InitializeStub">
            <summary>初始化 type StubQuestListRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestListResponse">
            <summary>Charlotte.Proto.QuestListResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestListResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestListResponse.InitializeStub">
            <summary>初始化 type StubQuestListResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestListResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestSubmitRequest">
            <summary>Charlotte.Proto.QuestSubmitRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestSubmitRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestSubmitRequest.InitializeStub">
            <summary>初始化 type StubQuestSubmitRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubQuestSubmitResponse">
            <summary>Charlotte.Proto.QuestSubmitResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestSubmitResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubQuestSubmitResponse.InitializeStub">
            <summary>初始化 type StubQuestSubmitResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubQuestSubmitResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubStateNotify">
            <summary>Charlotte.Proto.StateNotify 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubStateNotify.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubStateNotify.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubStateNotify.InitializeStub">
            <summary>初始化 type StubStateNotify 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubStateNotify.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubStateNotify.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamInfoRequest">
            <summary>Charlotte.Proto.TeamInfoRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInfoRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInfoRequest.InitializeStub">
            <summary>初始化 type StubTeamInfoRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamInfoResponse">
            <summary>Charlotte.Proto.TeamInfoResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInfoResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInfoResponse.InitializeStub">
            <summary>初始化 type StubTeamInfoResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInfoResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamInviteRequest">
            <summary>Charlotte.Proto.TeamInviteRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInviteRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInviteRequest.InitializeStub">
            <summary>初始化 type StubTeamInviteRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamInviteResponse">
            <summary>Charlotte.Proto.TeamInviteResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInviteResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamInviteResponse.InitializeStub">
            <summary>初始化 type StubTeamInviteResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamInviteResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamLeaveRequest">
            <summary>Charlotte.Proto.TeamLeaveRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamLeaveRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamLeaveRequest.InitializeStub">
            <summary>初始化 type StubTeamLeaveRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubTeamLeaveResponse">
            <summary>Charlotte.Proto.TeamLeaveResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamLeaveResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubTeamLeaveResponse.InitializeStub">
            <summary>初始化 type StubTeamLeaveResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubTeamLeaveResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest">
            <summary>Charlotte.Proto.UserCreateCharacterRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest.InitializeStub">
            <summary>初始化 type StubUserCreateCharacterRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse">
            <summary>Charlotte.Proto.UserCreateCharacterResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse.InitializeStub">
            <summary>初始化 type StubUserCreateCharacterResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserCreateCharacterResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserGameEnterRequest">
            <summary>Charlotte.Proto.UserGameEnterRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameEnterRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameEnterRequest.InitializeStub">
            <summary>初始化 type StubUserGameEnterRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserGameEnterResponse">
            <summary>Charlotte.Proto.UserGameEnterResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameEnterResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameEnterResponse.InitializeStub">
            <summary>初始化 type StubUserGameEnterResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameEnterResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserGameLeaveRequest">
            <summary>Charlotte.Proto.UserGameLeaveRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameLeaveRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameLeaveRequest.InitializeStub">
            <summary>初始化 type StubUserGameLeaveRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserGameLeaveResponse">
            <summary>Charlotte.Proto.UserGameLeaveResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameLeaveResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserGameLeaveResponse.InitializeStub">
            <summary>初始化 type StubUserGameLeaveResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserGameLeaveResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserLoginRequest">
            <summary>Charlotte.Proto.UserLoginRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserLoginRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserLoginRequest.InitializeStub">
            <summary>初始化 type StubUserLoginRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserLoginResponse">
            <summary>Charlotte.Proto.UserLoginResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserLoginResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserLoginResponse.InitializeStub">
            <summary>初始化 type StubUserLoginResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserLoginResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserRegisterRequest">
            <summary>Charlotte.Proto.UserRegisterRequest 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserRegisterRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserRegisterRequest.InitializeStub">
            <summary>初始化 type StubUserRegisterRequest 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Charlotte.Proto.Fakes.StubUserRegisterResponse">
            <summary>Charlotte.Proto.UserRegisterResponse 的存根类型</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserRegisterResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Charlotte.Proto.Fakes.StubUserRegisterResponse.InitializeStub">
            <summary>初始化 type StubUserRegisterResponse 的新实例</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Charlotte.Proto.Fakes.StubUserRegisterResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
